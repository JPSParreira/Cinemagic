
3)  ----------------------------- -----------------------------

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=laravel
DB_USERNAME=root
DB_PASSWORD=




5)  ----------------------------- -----------------------------

composer update


6)  ----------------------------- -----------------------------

php artisan migrate:fresh

php artisan db:seed



7)  ----------------------------- -----------------------------

php artisan storage:link


12)  ----------------------------- -----------------------------

composer update



14)  ----------------------------- -----------------------------


./vendor/bin/sail up -d

sail up -d



15)  ----------------------------- -----------------------------

sail php artisan migrate:fresh

sail php artisan db:seed


16)  ----------------------------- -----------------------------

sail php artisan storage:link


23)  ----------------------------- -----------------------------

php artisan storage:link


24)  ----------------------------- -----------------------------

./vendor/bin/sail up -d

sail up -d


sail php artisan storage:link




28)  ----------------------------- -----------------------------

    public function index(Request $request): View
    {
        $filterByCourse = $request->query('course', 'EI');
        $filterByYear = $request->year ?? 1;
        $filterBySemester = $request->input('semester') ?? 1;
        $disciplines = Discipline::where('course', $filterByCourse)
            ->where('year', $filterByYear)
            ->where('semester', $filterBySemester)
            ->paginate(20);
        return view('disciplines.index',
            compact('disciplines', 'filterByCourse', 'filterByYear', 'filterBySemester'));
    }



32)  ----------------------------- -----------------------------

            <x-disciplines.filter-card
                :filterAction="route('disciplines.index')"
                :resetUrl="route('disciplines.index')"
                :courses="$courses->pluck('fullName', 'abbreviation')->toArray()"
                :course="old('course', $filterByCourse)"
                :year="old('year', $filterByYear)"
                :semester="old('semester', $filterBySemester)"
                class="mb-6"
                />


35)  ----------------------------- -----------------------------

    public function index(Request $request): View
    {
        $filterByCourse = $request->query('course');
        $filterByYear = $request->year;
        $filterBySemester = $request->input('semester');
        $disciplinesQuery = Discipline::query();
        if ($filterByCourse !== null) {
            $disciplinesQuery->where('course', $filterByCourse);
        }
        if ($filterByYear !== null) {
            $disciplinesQuery->where('year', $filterByYear);
        }
        if ($filterBySemester !== null) {
            $disciplinesQuery->where('semester', $filterBySemester);
        }
        $disciplines = $disciplinesQuery->paginate(20);
        return view(
            'disciplines.index',
            compact('disciplines', 'filterByCourse', 'filterByYear', 'filterBySemester')
        );
    }



38)  ----------------------------- -----------------------------

    public function index(Request $request): View
    {
        $filterByCourse = $request->query('course');
        $filterByYear = $request->year;
        $filterBySemester = $request->input('semester');
        $filterByTeacher = $request->teacher;
        $disciplinesQuery = Discipline::query();
        if ($filterByCourse !== null) {
            $disciplinesQuery->where('course', $filterByCourse);
        }
        if ($filterByYear !== null) {
            $disciplinesQuery->where('year', $filterByYear);
        }
        if ($filterBySemester !== null) {
            $disciplinesQuery->where('semester', $filterBySemester);
        }
        if ($filterByTeacher !== null) {
            $disciplinesQuery->join('teachers_disciplines', 'disciplines.id', '=', 'teachers_disciplines.discipline_id')
                ->join('teachers', 'teachers_disciplines.teacher_id', '=', 'teachers.id')
                ->join('users', 'teachers.user_id', '=', 'users.id')
                ->where('users.name', 'like', "%$filterByTeacher%")
                ->select('disciplines.*')
                ->distinct();
        }
        $disciplines = $disciplinesQuery->paginate(20);
        return view(
            'disciplines.index',
            compact('disciplines', 'filterByCourse', 'filterByYear', 'filterBySemester', 'filterByTeacher')
        );
    }



39)  ----------------------------- -----------------------------


            <x-disciplines.filter-card
                :filterAction="route('disciplines.index')"
                :resetUrl="route('disciplines.index')"
                :courses="$courses->pluck('fullName', 'abbreviation')->toArray()"
                :course="old('course', $filterByCourse)"
                :year="old('year', $filterByYear)"
                :semester="old('semester', $filterBySemester)"
                :teacher="old('teacher', $filterByTeacher)"
                class="mb-6"
                />


42)  ----------------------------- -----------------------------

    public function index(Request $request): View
    {
        $filterByCourse = $request->query('course');
        $filterByYear = $request->year;
        $filterBySemester = $request->input('semester');
        $filterByTeacher = $request->teacher;
        $disciplinesQuery = Discipline::query();
        if ($filterByCourse !== null) {
            $disciplinesQuery->where('course', $filterByCourse);
        }
        if ($filterByYear !== null) {
            $disciplinesQuery->where('year', $filterByYear);
        }
        if ($filterBySemester !== null) {
            $disciplinesQuery->where('semester', $filterBySemester);
        }
        if ($filterByTeacher !== null) {
            $usersIds = DB::table('users')
                ->where('type', 'T')
                ->where('name', 'like', "%$filterByTeacher%")
                ->pluck('id')
                ->toArray();
            $teachersIds = DB::table('teachers')
                ->whereIntegerInRaw('user_id', $usersIds)
                ->pluck('id')
                ->toArray();
            $disciplinesIds = DB::table('teachers_disciplines')
                ->whereIntegerInRaw('teacher_id', $teachersIds)
                ->pluck('discipline_id')
                ->toArray();
            $disciplinesQuery->whereIntegerInRaw('id', $disciplinesIds);
        }
        $disciplines = $disciplinesQuery->paginate(20);
        return view(
            'disciplines.index',
            compact('disciplines', 'filterByCourse', 'filterByYear', 'filterBySemester', 'filterByTeacher')
        );
    }




46)  ----------------------------- -----------------------------

    public function index(Request $request): View
    {
        $filterByCourse = $request->query('course');
        $filterByYear = $request->year;
        $filterBySemester = $request->input('semester');
        $filterByTeacher = $request->teacher;
        $disciplinesQuery = Discipline::query();
        if ($filterByCourse !== null) {
            $disciplinesQuery->where('course', $filterByCourse);
        }
        if ($filterByYear !== null) {
            $disciplinesQuery->where('year', $filterByYear);
        }
        if ($filterBySemester !== null) {
            $disciplinesQuery->where('semester', $filterBySemester);
        }
        if ($filterByTeacher !== null) {
            $usersIds = DB::table('users')
                ->where('type', 'T')
                ->where('name', 'like', "%$filterByTeacher%")
                ->pluck('id')
                ->toArray();
            $teachersIds = DB::table('teachers')
                ->whereIntegerInRaw('user_id', $usersIds)
                ->pluck('id')
                ->toArray();
            $disciplinesIds = DB::table('teachers_disciplines')
                ->whereIntegerInRaw('teacher_id', $teachersIds)
                ->pluck('discipline_id')
                ->toArray();
            $disciplinesQuery->whereIntegerInRaw('id', $disciplinesIds);
        }
        $disciplines = $disciplinesQuery->paginate(20)->withQueryString();
        return view(
            'disciplines.index',
            compact('disciplines', 'filterByCourse', 'filterByYear', 'filterBySemester', 'filterByTeacher')
        );
    }




49)  ----------------------------- -----------------------------

php artisan tinker



50)  ----------------------------- -----------------------------

$testData = Discipline::where('course', 'EI')->where('year', 2)
            ->where('semester', 2)->get();




51)  ----------------------------- -----------------------------

$arrayIds = $testData->pluck('id')->toArray();

$finalResult = Discipline::whereIntegerInRaw('id', $arrayIds)
               ->where('name', 'like', '%Internet%')->get();


53)  ----------------------------- -----------------------------

php artisan make:model Teacher



54)  ----------------------------- -----------------------------

php artisan make:model Student


55)  ----------------------------- -----------------------------

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Teacher extends Model
{
    use HasFactory;

    public $timestamps = false;

    protected $fillable = ['user_id', 'department', 'office', 'extension' , 'locker'];
}




56)  ----------------------------- -----------------------------

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Student extends Model
{
    use HasFactory;

    public $timestamps = false;

    protected $fillable = ['user_id', 'number', 'course'];
}




57)  ----------------------------- -----------------------------

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;

class Teacher extends Model
{
    use HasFactory;

    public $timestamps = false;

    protected $fillable = ['user_id', 'department', 'office', 'extension' , 'locker'];

    public function departmentRef(): BelongsTo
    {
        return $this->belongsTo(Department::class, 'department', 'abbreviation');
    }

    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class);
    }
}



58)  ----------------------------- -----------------------------

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;

class Student extends Model
{
    use HasFactory;

    public $timestamps = false;

    protected $fillable = ['user_id', 'number', 'course'];

    public function courseRef(): BelongsTo
    {
        return $this->belongsTo(Course::class, 'course', 'abbreviation');
    }
    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class);
    }
}



59)  ----------------------------- -----------------------------

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\HasMany;

class Department extends Model
{
    use HasFactory;

    protected $fillable = [
        'abbreviation',
        'name',
        'name_pt',
    ];

    public $timestamps = false;

    protected $primaryKey = 'abbreviation';

    public $incrementing = false;

    protected $keyType = 'string';

    public function teachers(): HasMany
    {
        return $this->hasMany(Teacher::class, 'department', 'abbreviation');
    }
}



60)  ----------------------------- -----------------------------

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Storage;
use Illuminate\Database\Eloquent\Relations\HasMany;

class Course extends Model
{
    use HasFactory;

    protected $fillable = [
        'abbreviation',
        'name',
        'name_pt',
        'type',
        'semesters',
        'ECTS',
        'places',
        'contact',
        'objectives',
        'objectives_pt',
    ];

    public $timestamps = false;

    protected $primaryKey = 'abbreviation';

    public $incrementing = false;

    protected $keyType = 'string';

    public function getFullNameAttribute()
    {
        return match ($this->type) {
            'Master'    => "Master's in ",
            'TESP'      => 'TeSP - ',
            default     => ''
        }
            . $this->name;
    }

    public function getImageUrlAttribute()
    {
        $abrUpper = strtoupper(trim($this->abbreviation));
        if (Storage::exists("public/courses/$abrUpper.png")) {
            return asset("storage/courses/$abrUpper.png");
        } else {
            return asset("storage/courses/no_course.png");
        }
    }

    public function students(): HasMany
    {
        return $this->hasMany(Student::class, 'course', 'abbreviation');
    }

    public function disciplines(): HasMany
    {
        return $this->hasMany(Discipline::class, 'course', 'abbreviation');
    }
}




61)  ----------------------------- -----------------------------

<?php

namespace App\Models;

// use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Illuminate\Database\Eloquent\Relations\HasOne;

class User extends Authenticatable
{
    use HasFactory, Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'name',
        'email',
        'password',
        'admin',
        'type',
        'gender',
        'photo_url'
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var array<int, string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * Get the attributes that should be cast.
     *
     * @return array<string, string>
     */
    protected function casts(): array
    {
        return [
            'email_verified_at' => 'datetime',
            'password' => 'hashed',
        ];
    }

    public function teacher(): HasOne
    {
        return $this->hasOne(Teacher::class);
    }

    public function student(): HasOne
    {
        return $this->hasOne(Student::class);
    }
}



62)  ----------------------------- -----------------------------

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;

class Teacher extends Model
{
    use HasFactory;

    public $timestamps = false;

    protected $fillable = ['user_id', 'department', 'office', 'extension', 'locker'];

    public function departmentRef(): BelongsTo
    {
        return $this->belongsTo(Department::class, 'department', 'abbreviation');
    }

    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class);
    }

    public function disciplines(): BelongsToMany
    {
        return $this->belongsToMany(
            Discipline::class,
            'teachers_disciplines'
        );
    }
}




63)  ----------------------------- -----------------------------

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;

class Student extends Model
{
    use HasFactory;

    public $timestamps = false;

    protected $fillable = ['user_id', 'number', 'course'];

    public function courseRef(): BelongsTo
    {
        return $this->belongsTo(Course::class, 'course', 'abbreviation');
    }

    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class);
    }

    public function disciplines(): BelongsToMany
    {
        return $this->belongsToMany(
            Discipline::class,
            'students_disciplines',
            'students_id',
            'discipline_id'
        );
    }
}






64)  ----------------------------- -----------------------------

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Database\Eloquent\Relations\BelongsTo;

class Discipline extends Model
{
    use HasFactory;

    protected $fillable = [
        'course',
        'year',
        'semester',
        'abbreviation',
        'name',
        'name_pt',
        'ECTS',
        'hours',
        'optional',
    ];

    public $timestamps = false;

    public function getSemesterDescriptionAttribute()
    {
        return match ($this->semester) {
            0       => "Anual",
            1       => "1st",
            2       => "2nd",
            default => '?'
        };
    }

    public function courseRef(): BelongsTo
    {
        return $this->belongsTo(Course::class, 'course', 'abbreviation');
    }

    public function teachers(): BelongsToMany
    {
        return $this->belongsToMany(Teacher::class, 'teachers_disciplines');
    }

    public function students(): BelongsToMany
    {
        return $this->belongsToMany(
            Student::class,
            'students_disciplines',
            'discipline_id',
            'students_id'
        );
    }
}




65)  ----------------------------- -----------------------------

$department = \App\Models\Department::findOrFail('DEI')

$teachersDei = $department->teachers

$course = \App\Models\Course::find('EI')

$disciplinasEI = $course->disciplines

$studentsEI = $course->students

$user = \App\Models\User::where('name', 'like', '%Marco%Monteiro%')->first()

$teacher = $user->teacher

$teacherName = $teacher->user->name

$deptName = $teacher->departmentRef->name

$teachersOfMyDepartment = $teacher->departmentRef->teachers

$myDisciplines = $teacher->disciplines

$teacher->disciplines->count()

$myFirstDiscipline = $myDisciplines[0]

$allTeacherOfFirstDiscipline = $myDisciplines[0]->teachers

$myStudentsOfFirstDiscipline = $myDisciplines[0]->students

$myStudentsOfFirstDiscipline->count()

$student = $myDisciplines[0]->students[0]

$student->user->name

$studentDisciplines = $student->disciplines

$arrayStudentDisciplines = $student->disciplines->pluck('name')

$studentColeguesFirstDisc = $student->disciplines[0]->students

$user = \App\Models\User::where('name', 'like', '%Marco%Monteiro%')->first()

$user->name

$student = $user->student

$studentNumber1 = $user->student->number

$studentNumber2 = $user->student?->number




66)  ----------------------------- -----------------------------

<div {{ $attributes }}>
    <table class="table-auto border-collapse">
        <thead>
        <tr class="border-b-2 border-b-gray-400 dark:border-b-gray-500 bg-gray-100 dark:bg-gray-800">
            <th class="px-2 py-2 text-left hidden sm:table-cell">Abbreviation</th>
            <th class="px-2 py-2 text-left">Name</th>
            @if($showCourse)
                <th class="px-2 py-2 text-left hidden md:table-cell">Course</th>
            @endif
            <th class="px-2 py-2 text-right hidden md:table-cell">Year</th>
            <th class="px-2 py-2 text-left hidden md:table-cell">Semester</th>
            <th class="px-2 py-2 text-right hidden lg:table-cell">ECTS</th>
            <th class="px-2 py-2 text-right hidden lg:table-cell">Hours</th>
            <th class="px-2 py-2 text-left hidden lg:table-cell">Optional</th>
            @if($showView)
                <th></th>
            @endif
            @if($showEdit)
                <th></th>
            @endif
            @if($showDelete)
                <th></th>
            @endif
        </tr>
        </thead>
        <tbody>
        @foreach ($disciplines as $discipline)
            <tr class="border-b border-b-gray-400 dark:border-b-gray-500">
                <td class="px-2 py-2 text-left hidden sm:table-cell">{{ $discipline->abbreviation }}</td>
                <td class="px-2 py-2 text-left">{{ $discipline->name }}</td>
                @if($showCourse)
                    <td class="px-2 py-2 text-left hidden md:table-cell">{{ $discipline->courseRef->name }}</td>
                @endif
                <td class="px-2 py-2 text-right hidden md:table-cell">{{ $discipline->year }}</td>
                <td class="px-2 py-2 text-left hidden md:table-cell">{{ $discipline->semesterDescription }}</td>
                <td class="px-2 py-2 text-right hidden lg:table-cell">{{ $discipline->ECTS }}</td>
                <td class="px-2 py-2 text-right hidden lg:table-cell">{{ $discipline->hours }}</td>
                <td class="px-2 py-2 text-left hidden lg:table-cell">{{ $discipline->optional ? 'optional' : '' }}</td>
                @if($showView)
                    <td>
                        <x-table.icon-show class="ps-3 px-0.5"
                        href="{{ route('disciplines.show', ['discipline' => $discipline]) }}"/>
                    </td>
                @endif
                @if($showEdit)
                    <td>
                        <x-table.icon-edit class="px-0.5"
                        href="{{ route('disciplines.edit', ['discipline' => $discipline]) }}"/>
                    </td>
                @endif
                @if($showDelete)
                    <td>
                        <x-table.icon-delete class="px-0.5"
                        action="{{ route('disciplines.destroy', ['discipline' => $discipline]) }}"/>
                    </td>
                @endif
            </tr>
        @endforeach
        </tbody>
    </table>
</div>




68)  ----------------------------- -----------------------------

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Discipline;
use Illuminate\View\View;
use Illuminate\Http\RedirectResponse;
use App\Http\Requests\DisciplineFormRequest;
use Illuminate\Support\Facades\DB;

class DisciplineController extends Controller
{
    /**
     * Display a listing of the resource.
        */

    public function index(Request $request): View
    {
        $filterByCourse = $request->query('course');
        $filterByYear = $request->year;
        $filterBySemester = $request->input('semester');
        $filterByTeacher = $request->teacher;
        $disciplinesQuery = Discipline::query();
        if ($filterByCourse !== null) {
            $disciplinesQuery->where('course', $filterByCourse);
        }
        if ($filterByYear !== null) {
            $disciplinesQuery->where('year', $filterByYear);
        }
        if ($filterBySemester !== null) {
            $disciplinesQuery->where('semester', $filterBySemester);
        }
        if ($filterByTeacher !== null) {
            $usersIds = DB::table('users')
                ->where('type', 'T')
                ->where('name', 'like', "%$filterByTeacher%")
                ->pluck('id')
                ->toArray();
            $teachersIds = DB::table('teachers')
                ->whereIntegerInRaw('user_id', $usersIds)
                ->pluck('id')
                ->toArray();
            $disciplinesIds = DB::table('teachers_disciplines')
                ->whereIntegerInRaw('teacher_id', $teachersIds)
                ->pluck('discipline_id')
                ->toArray();
            $disciplinesQuery->whereIntegerInRaw('id', $disciplinesIds);
        }
        $disciplines = $disciplinesQuery->with('courseRef')->paginate(20)->withQueryString();
        return view(
            'disciplines.index',
            compact('disciplines', 'filterByCourse', 'filterByYear', 'filterBySemester', 'filterByTeacher')
        );
    }


    /**
     * Show the form for creating a new resource.
     */
    public function create(): View
    {
        $discipline = new Discipline();
        // $courses no longer required, because it is available through View::share
        // Check AppServiceProvider
        //$courses = Course::all();
        return view('disciplines.create')
            ->with('discipline', $discipline);
            //->with('courses', $courses);
    }

    /**
     * Store a newly created resource in storage.
     */
    public function  store(DisciplineFormRequest $request): RedirectResponse
    {
        $NewDiscipline = Discipline::create($request->validated());
        $url = route('disciplines.show', ['discipline' => $NewDiscipline]);
        $htmlMessage = "Discipline <a href='$url'><u>{$NewDiscipline->name}</u></a> ({$NewDiscipline->abbreviation}) has been created successfully!";
        return redirect()->route('disciplines.index')
        ->with('alert-type', 'success')
        ->with('alert-msg', $htmlMessage);
    }


    /**
     * Display the specified resource.
     */
    public function show(Discipline $discipline): View
    {
        return view('disciplines.show')
            ->with('discipline', $discipline);
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(Discipline $discipline): View
    {
        return view('disciplines.edit')
            ->with('discipline', $discipline);
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(DisciplineFormRequest $request, Discipline $discipline): RedirectResponse
    {
        $discipline->update($request->validated());
        $url = route('disciplines.show', ['discipline' => $discipline]);
        $htmlMessage = "Discipline <a href='$url'><u>{$discipline->name}</u></a> ({$discipline->abbreviation}) has been updated successfully!";
        return redirect()->route('disciplines.index')
            ->with('alert-type', 'success')
            ->with('alert-msg', $htmlMessage);
    }


    /**
     * Remove the specified resource from storage.
     */
    public function destroy(Discipline $discipline): RedirectResponse
    {
        try {
            $url = route('disciplines.show', ['discipline' => $discipline]);
            $totalStudents = DB::scalar(
                'select count(*) from students_disciplines where discipline_id = ?',
                [$discipline->id]
            );
            $totalTeachers = DB::scalar(
                'select count(*) from teachers_disciplines where discipline_id = ?',
                [$discipline->id]
            );
            if ($totalStudents == 0 && $totalTeachers == 0) {
                $discipline->delete();
                $alertType = 'success';
                $alertMsg = "Discipline {$discipline->name} ({$discipline->abbreviation}) has been deleted successfully!";
            } else {
                $alertType = 'warning';
                $studentsStr = match (true) {
                    $totalStudents <= 0 => "",
                    $totalStudents == 1 => "there is 1 student enrolled in it",
                    $totalStudents > 1 => "there are $totalStudents students enrolled in it",
                };
                $teachersStr = match (true) {
                    $totalTeachers <= 0 => "",
                    $totalTeachers == 1 => "it already has 1 teacher",
                    $totalTeachers > 1 => "it already has $totalTeachers teachers",
                };
                $justification = $studentsStr && $teachersStr
                    ? "$teachersStr and $studentsStr"
                    : "$teachersStr$studentsStr";
                $alertMsg = "Discipline <a href='$url'><u>{$discipline->name}</u></a> ({$discipline->abbreviation}) cannot be deleted because $justification.";
            }
        } catch (\Exception $error) {
            $alertType = 'danger';
            $alertMsg = "It was not possible to delete the discipline
                            <a href='$url'><u>{$discipline->name}</u></a> ({$discipline->abbreviation})
                            because there was an error with the operation!";
        }
        return redirect()->back()
            ->with('alert-type', $alertType)
            ->with('alert-msg', $alertMsg);
    }

}



70)  ----------------------------- -----------------------------


@extends('layouts.main')

@section('header-title', $course->name)

@section('main')
<div class="flex flex-col space-y-6">
    <div class="p-4 sm:p-8 bg-white dark:bg-gray-900 shadow sm:rounded-lg">
        <div class="max-full">
            <section>
                <header>
                    <h2 class="text-lg font-medium text-gray-900 dark:text-gray-100">
                        Course "{{ $course->name }}"
                    </h2>
                </header>
                <div class="mt-6 space-y-4">
                    @include('courses.shared.fields', ['mode' => 'show'])
                </div>
                <h3 class="pt-16 pb-4 text-lg font-medium text-gray-900 dark:text-gray-100">
                    Disciplines of the course
                </h3>
                <x-disciplines.table :disciplines="$course->disciplines"
                    :showCourse="false"
                    :showView="true"
                    :showEdit="false"
                    :showDelete="false"
                    />
            </section>
        </div>
    </div>
</div>
@endsection




72)  ----------------------------- -----------------------------

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Discipline;
use Illuminate\View\View;
use Illuminate\Http\RedirectResponse;
use App\Http\Requests\DisciplineFormRequest;
use Illuminate\Support\Facades\DB;

class DisciplineController extends Controller
{
    /**
     * Display a listing of the resource.
        */

    public function index(Request $request): View
    {
        $filterByCourse = $request->query('course');
        $filterByYear = $request->year;
        $filterBySemester = $request->input('semester');
        $filterByTeacher = $request->teacher;
        $disciplinesQuery = Discipline::query();
        if ($filterByCourse !== null) {
            $disciplinesQuery->where('course', $filterByCourse);
        }
        if ($filterByYear !== null) {
            $disciplinesQuery->where('year', $filterByYear);
        }
        if ($filterBySemester !== null) {
            $disciplinesQuery->where('semester', $filterBySemester);
        }
        // if ($filterByTeacher !== null) {
        //     $usersIds = DB::table('users')
        //         ->where('type', 'T')
        //         ->where('name', 'like', "%$filterByTeacher%")
        //         ->pluck('id')
        //         ->toArray();
        //     $teachersIds = DB::table('teachers')
        //         ->whereIntegerInRaw('user_id', $usersIds)
        //         ->pluck('id')
        //         ->toArray();
        //     $disciplinesIds = DB::table('teachers_disciplines')
        //         ->whereIntegerInRaw('teacher_id', $teachersIds)
        //         ->pluck('discipline_id')
        //         ->toArray();
        //     $disciplinesQuery->whereIntegerInRaw('id', $disciplinesIds);
        // }

        if ($filterByTeacher !== null) {
            $disciplinesQuery->with('teachers.user')->whereHas(
                'teachers.user',
                function ($userQuery) use ($filterByTeacher) {
                    $userQuery->where('name', 'LIKE', '%' . $filterByTeacher . '%');
                }
            );
        }

        $disciplines = $disciplinesQuery
            ->with('courseRef')
            ->orderBy('year')
            ->orderBy('semester')
            ->orderBy('name')
            ->paginate(20)
            ->withQueryString();
        return view(
            'disciplines.index',
            compact('disciplines', 'filterByCourse', 'filterByYear', 'filterBySemester', 'filterByTeacher')
        );
    }


    /**
     * Show the form for creating a new resource.
     */
    public function create(): View
    {
        $discipline = new Discipline();
        // $courses no longer required, because it is available through View::share
        // Check AppServiceProvider
        //$courses = Course::all();
        return view('disciplines.create')
            ->with('discipline', $discipline);
            //->with('courses', $courses);
    }

    /**
     * Store a newly created resource in storage.
     */
    public function  store(DisciplineFormRequest $request): RedirectResponse
    {
        $NewDiscipline = Discipline::create($request->validated());
        $url = route('disciplines.show', ['discipline' => $NewDiscipline]);
        $htmlMessage = "Discipline <a href='$url'><u>{$NewDiscipline->name}</u></a> ({$NewDiscipline->abbreviation}) has been created successfully!";
        return redirect()->route('disciplines.index')
        ->with('alert-type', 'success')
        ->with('alert-msg', $htmlMessage);
    }


    /**
     * Display the specified resource.
     */
    public function show(Discipline $discipline): View
    {
        return view('disciplines.show')
            ->with('discipline', $discipline);
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(Discipline $discipline): View
    {
        return view('disciplines.edit')
            ->with('discipline', $discipline);
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(DisciplineFormRequest $request, Discipline $discipline): RedirectResponse
    {
        $discipline->update($request->validated());
        $url = route('disciplines.show', ['discipline' => $discipline]);
        $htmlMessage = "Discipline <a href='$url'><u>{$discipline->name}</u></a> ({$discipline->abbreviation}) has been updated successfully!";
        return redirect()->route('disciplines.index')
            ->with('alert-type', 'success')
            ->with('alert-msg', $htmlMessage);
    }


    /**
     * Remove the specified resource from storage.
     */
    public function destroy(Discipline $discipline): RedirectResponse
    {
        try {
            $url = route('disciplines.show', ['discipline' => $discipline]);
            $totalStudents = DB::scalar(
                'select count(*) from students_disciplines where discipline_id = ?',
                [$discipline->id]
            );
            $totalTeachers = DB::scalar(
                'select count(*) from teachers_disciplines where discipline_id = ?',
                [$discipline->id]
            );
            if ($totalStudents == 0 && $totalTeachers == 0) {
                $discipline->delete();
                $alertType = 'success';
                $alertMsg = "Discipline {$discipline->name} ({$discipline->abbreviation}) has been deleted successfully!";
            } else {
                $alertType = 'warning';
                $studentsStr = match (true) {
                    $totalStudents <= 0 => "",
                    $totalStudents == 1 => "there is 1 student enrolled in it",
                    $totalStudents > 1 => "there are $totalStudents students enrolled in it",
                };
                $teachersStr = match (true) {
                    $totalTeachers <= 0 => "",
                    $totalTeachers == 1 => "it already has 1 teacher",
                    $totalTeachers > 1 => "it already has $totalTeachers teachers",
                };
                $justification = $studentsStr && $teachersStr
                    ? "$teachersStr and $studentsStr"
                    : "$teachersStr$studentsStr";
                $alertMsg = "Discipline <a href='$url'><u>{$discipline->name}</u></a> ({$discipline->abbreviation}) cannot be deleted because $justification.";
            }
        } catch (\Exception $error) {
            $alertType = 'danger';
            $alertMsg = "It was not possible to delete the discipline
                            <a href='$url'><u>{$discipline->name}</u></a> ({$discipline->abbreviation})
                            because there was an error with the operation!";
        }
        return redirect()->route('disciplines.index')
            ->with('alert-type', $alertType)
            ->with('alert-msg', $alertMsg);
    }
}
