
3)  ----------------------------- -----------------------------

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=laravel
DB_USERNAME=root
DB_PASSWORD=




5)  ----------------------------- -----------------------------

composer update


6)  ----------------------------- -----------------------------

php artisan migrate:fresh

php artisan db:seed



7)  ----------------------------- -----------------------------

php artisan storage:link


12)  ----------------------------- -----------------------------

composer update



14)  ----------------------------- -----------------------------


./vendor/bin/sail up -d

sail up -d



15)  ----------------------------- -----------------------------

sail php artisan migrate:fresh

sail php artisan db:seed


16)  ----------------------------- -----------------------------

sail php artisan storage:link


23)  ----------------------------- -----------------------------

php artisan storage:link


24)  ----------------------------- -----------------------------

./vendor/bin/sail up -d

sail up -d


sail php artisan storage:link




25)  ----------------------------- -----------------------------

composer require laravel/breeze --dev





27)  ----------------------------- -----------------------------

php artisan breeze:install




30)  ----------------------------- -----------------------------

<?php

use App\Http\Controllers\ProfileController;
use App\Http\Controllers\AdministrativeController;
use App\Http\Controllers\CourseController;
use App\Http\Controllers\DisciplineController;
use App\Http\Controllers\DepartmentController;
use App\Http\Controllers\TeacherController;
use App\Http\Controllers\StudentController;
use App\Http\Controllers\CartController;
use Illuminate\Support\Facades\Route;

/* GENERATED BY LARAVEL BREEZE ------------- */
Route::get('/', function () {
    return view('welcome');
});

Route::get('/dashboard', function () {
    return view('dashboard');
})->middleware(['auth', 'verified'])->name('dashboard');

Route::middleware('auth')->group(function () {
    Route::get('/profile', [ProfileController::class, 'edit'])->name('profile.edit');
    Route::patch('/profile', [ProfileController::class, 'update'])->name('profile.update');
    Route::delete('/profile', [ProfileController::class, 'destroy'])->name('profile.destroy');
});

require __DIR__.'/auth.php';


/* ORIGINAL ROUTES ------------------------ */

Route::view('/', 'home')->name('home');

Route::get('courses/showcase', [CourseController::class, 'showCase'])->name('courses.showcase');
Route::get('courses/{course}/curriculum', [CourseController::class, 'showCurriculum'])->name('courses.curriculum');
Route::delete('courses/{course}/image', [CourseController::class, 'destroyImage'])
    ->name('courses.image.destroy');
Route::resource('courses', CourseController::class);

Route::resource('departments', DepartmentController::class);

Route::resource('disciplines', DisciplineController::class);

Route::delete('teachers/{teacher}/photo', [TeacherController::class, 'destroyPhoto'])
    ->name('teachers.photo.destroy');
Route::resource('teachers', TeacherController::class);

Route::delete('students/{student}/photo', [StudentController::class, 'destroyPhoto'])
    ->name('students.photo.destroy');
Route::resource('students', StudentController::class);

Route::delete('administratives/{administrative}/photo', [AdministrativeController::class, 'destroyPhoto'])
    ->name('administratives.photo.destroy');
Route::resource('administratives', AdministrativeController::class);

// Add a discipline to the cart:
Route::post('cart/{discipline}', [CartController::class, 'addToCart'])
    ->name('cart.add');
// Remove a discipline from the cart:
Route::delete('cart/{discipline}', [CartController::class, 'removeFromCart'])
    ->name('cart.remove');
// Show the cart:
Route::get('cart', [CartController::class, 'show'])->name('cart.show');
// Confirm (store) the cart and save disciplines registration on the database:
Route::post('cart', [CartController::class, 'confirm'])->name('cart.confirm');
// Clear the cart:
Route::delete('cart', [CartController::class, 'destroy'])->name('cart.destroy');





32)  ----------------------------- -----------------------------

import './bootstrap';

import Alpine from 'alpinejs';

/* Begin - our custom JavaScript code */
import './menu'

import.meta.glob([
  '../img/**',
]);

/* End - our custom JavaScript code */

window.Alpine = Alpine;

Alpine.start();




33)  ----------------------------- -----------------------------

npm run build
npm run dev





46)  ----------------------------- -----------------------------

MAIL_MAILER=smtp
MAIL_HOST=sandbox.smtp.mailtrap.io
MAIL_PORT=2525
MAIL_USERNAME=your_username
MAIL_PASSWORD=your_password
MAIL_FROM_ADDRESS="noreply@example.com"
MAIL_FROM_NAME="${APP_NAME}"




55)  ----------------------------- -----------------------------


<?php

namespace App\Models;

use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Illuminate\Database\Eloquent\Relations\HasOne;
use Illuminate\Support\Facades\Storage;

class User extends Authenticatable implements MustVerifyEmail
{
    use HasFactory, Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'name',
        'email',
        'password',
        'admin',
        'type',
        'gender',
        'photo_url'
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var array<int, string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * Get the attributes that should be cast.
     *
     * @return array<string, string>
     */
    protected function casts(): array
    {
        return [
            'email_verified_at' => 'datetime',
            'password' => 'hashed',
        ];
    }

    public function getPhotoFullUrlAttribute()
    {
        debug($this->photo_url);

        if ($this->photo_url && Storage::exists("public/photos/{$this->photo_url}")) {
            return asset("storage/photos/{$this->photo_url}");
        } else {
            return asset("storage/photos/anonymous.png");
        }
    }

    public function teacher(): HasOne
    {
        return $this->hasOne(Teacher::class);
    }

    public function student(): HasOne
    {
        return $this->hasOne(Student::class);
    }
}




64)  ----------------------------- -----------------------------

@extends('layouts.main')

@section('header-title', 'Login')

@section('main')
    <div class="min-h-screen flex flex-col justify-start items-center pt-6 sm:pt-0 bg-gray-100 dark:bg-gray-900">
        <div class="w-full sm:max-w-xl mt-6 px-6 py-4 bg-white dark:bg-gray-800 shadow-md overflow-hidden sm:rounded-lg">
            <h2 class="text-xl my-6">Login</h2>
            <!-- Session Status -->
            <x-auth-session-status class="mb-4" :status="session('status')" />

            <form method="POST" action="{{ route('login') }}">
                @csrf

                <!-- Email Address -->
                <div>
                    <x-input-label for="email" :value="__('Email')" />
                    <x-text-input id="email" class="block mt-1 w-full" type="email" name="email" :value="old('email')" required autofocus autocomplete="username" />
                    <x-input-error :messages="$errors->get('email')" class="mt-2" />
                </div>

                <!-- Password -->
                <div class="mt-4">
                    <x-input-label for="password" :value="__('Password')" />

                    <x-text-input id="password" class="block mt-1 w-full"
                                    type="password"
                                    name="password"
                                    required autocomplete="current-password" />

                    <x-input-error :messages="$errors->get('password')" class="mt-2" />
                </div>

                <!-- Remember Me -->
                <div class="block mt-4">
                    <label for="remember_me" class="inline-flex items-center">
                        <input id="remember_me" type="checkbox" class="rounded dark:bg-gray-900 border-gray-300 dark:border-gray-700 text-indigo-600 shadow-sm focus:ring-indigo-500 dark:focus:ring-indigo-600 dark:focus:ring-offset-gray-800" name="remember">
                        <span class="ms-2 text-sm text-gray-600 dark:text-gray-400">{{ __('Remember me') }}</span>
                    </label>
                </div>

                <div class="flex items-center justify-end mt-4">
                    @if (Route::has('password.request'))
                        <a class="underline text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 dark:focus:ring-offset-gray-800" href="{{ route('password.request') }}">
                            {{ __('Forgot your password?') }}
                        </a>
                    @endif

                    <x-primary-button class="ms-3">
                        {{ __('Log in') }}
                    </x-primary-button>
                </div>
            </form>
        </div>
    </div>
@endsection





66)  ----------------------------- -----------------------------


@extends('layouts.main')

@section('header-title', 'Register')

@section('main')
    <div class="min-h-screen flex flex-col justify-start items-center pt-6 sm:pt-0 bg-gray-100 dark:bg-gray-900">
        <div class="w-full sm:max-w-xl mt-6 px-6 py-4 bg-white dark:bg-gray-800 shadow-md overflow-hidden sm:rounded-lg">
            <h2 class="text-xl my-6">Register a new user</h2>
        <form method="POST" action="{{ route('register') }}">
            @csrf

            <!-- Name -->
            <div>
                <x-input-label for="name" :value="__('Name')" />
                <x-text-input id="name" class="block mt-1 w-full" type="text" name="name" :value="old('name')" required autofocus autocomplete="name" />
                <x-input-error :messages="$errors->get('name')" class="mt-2" />
            </div>

            <!-- Email Address -->
            <div class="mt-4">
                <x-input-label for="email" :value="__('Email')" />
                <x-text-input id="email" class="block mt-1 w-full" type="email" name="email" :value="old('email')" required autocomplete="username" />
                <x-input-error :messages="$errors->get('email')" class="mt-2" />
            </div>

            <!-- Password -->
            <div class="mt-4">
                <x-input-label for="password" :value="__('Password')" />

                <x-text-input id="password" class="block mt-1 w-full"
                                type="password"
                                name="password"
                                required autocomplete="new-password" />

                <x-input-error :messages="$errors->get('password')" class="mt-2" />
            </div>

            <!-- Confirm Password -->
            <div class="mt-4">
                <x-input-label for="password_confirmation" :value="__('Confirm Password')" />

                <x-text-input id="password_confirmation" class="block mt-1 w-full"
                                type="password"
                                name="password_confirmation" required autocomplete="new-password" />

                <x-input-error :messages="$errors->get('password_confirmation')" class="mt-2" />
            </div>

            <div class="flex items-center justify-end mt-4">
                <a class="underline text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 dark:focus:ring-offset-gray-800" href="{{ route('login') }}">
                    {{ __('Already registered?') }}
                </a>

                <x-primary-button class="ms-4">
                    {{ __('Register') }}
                </x-primary-button>
            </div>
        </form>
    </div>
</div>
@endsection






67)  ----------------------------- -----------------------------

@extends('layouts.main')

@section('header-title', 'Dashboard')

@section('main')
<div class="min-h-screen flex flex-col justify-start items-center pt-6 sm:pt-0 bg-gray-100 dark:bg-gray-900">
    <div class="w-full sm:max-w-xl mt-6 px-6 py-4 bg-white dark:bg-gray-800 shadow-md overflow-hidden sm:rounded-lg">

        <x-slot name="header">
            <h2 class="font-semibold text-xl text-gray-800 dark:text-gray-200 leading-tight">
                {{ __('Dashboard') }}
            </h2>
        </x-slot>

        <div class="py-12">
            <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
                <div class="bg-white dark:bg-gray-800 overflow-hidden shadow-sm sm:rounded-lg">
                    <div class="p-6 text-gray-900 dark:text-gray-100">
                        {{ __("You're logged in!") }}
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@endsection




68)  ----------------------------- -----------------------------

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <title>Department of Computer Engineering</title>
    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.bunny.net">
    <link href="https://fonts.bunny.net/css?family=figtree:400,500,600&display=swap" rel="stylesheet" />

    <!-- Scripts AND CSS Fileds -->
    @vite(['resources/css/app.css', 'resources/js/app.js'])
</head>

<body class="font-sans antialiased">
    <div class="min-h-screen bg-gray-100 dark:bg-gray-800">

        <!-- Navigation Menu -->
        <nav class="bg-white dark:bg-gray-900 border-b border-gray-100 dark:border-gray-800">
            <!-- Navigation Menu Full Container -->
            <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
                <!-- Logo + Menu Items + Hamburger -->
                <div class="relative flex flex-col sm:flex-row px-6 sm:px-0 grow justify-between">
                    <!-- Logo -->
                    <div class="shrink-0 -ms-4">
                        <a href="{{ route('home')}}">
                            <div class="h-16 w-40 bg-cover bg-[url('../img/politecnico_h.svg')] dark:bg-[url('../img/politecnico_h_white.svg')]"></div>
                        </a>
                    </div>

                    <!-- Menu Items -->
                    <div id="menu-container" class="grow flex flex-col sm:flex-row items-stretch
                    invisible h-0 sm:visible sm:h-auto">
                        <!-- Menu Item: Courses -->
                        <x-menus.menu-item
                            content="Courses"
                            href="{{ route('courses.showcase') }}"
                            selected="{{ Route::currentRouteName() == 'courses.showcase'}}"
                        />

                        <!-- Menu Item: Curricula -->
                        <x-menus.submenu-full-width
                            content="Curricula"
                            selectable="1"
                            selected="0"
                            uniqueName="submenu_curricula">
                            @foreach ($courses as $course)
                                <x-menus.submenu-item
                                :content="$course->fullName"
                                selectable="1"
                                selected="0"
                                href="{{ route('courses.curriculum', ['course' => $course]) }}"/>
                            @endforeach
                        </x-menus.submenu-full-width>

                        <!-- Menu Item: Disciplines -->
                        <x-menus.menu-item
                            content="Disciplines"
                            selectable="1"
                            href="{{ route('disciplines.index') }}"
                            selected="{{ Route::currentRouteName() == 'disciplines.index'}}"
                            />

                        <!-- Menu Item: Teachers -->
                        <x-menus.menu-item
                            content="Teachers"
                            selectable="1"
                            href="{{ route('teachers.index') }}"
                            selected="{{ Route::currentRouteName() == 'teachers.index'}}"
                            />

                        <!-- Menu Item: Others -->
                        <x-menus.submenu
                            selectable="0"
                            uniqueName="submenu_others"
                            content="More">
                                <x-menus.submenu-item
                                    content="Students"
                                    selectable="0"
                                    href="{{ route('students.index') }}" />
                                <x-menus.submenu-item
                                    content="Administratives"
                                    selectable="0"
                                    href="{{ route('administratives.index') }}" />
                                <hr>
                                <x-menus.submenu-item
                                    content="Departments"
                                    selectable="0"
                                    href="{{ route('departments.index') }}"/>
                                <x-menus.submenu-item
                                    content="Course Management"
                                    href="{{ route('courses.index') }}"/>
                        </x-menus.submenu>

                        <div class="grow"></div>

                        <!-- Menu Item: Cart -->
                        @if (session('cart'))
                            <x-menus.cart
                                :href="route('cart.show')"
                                selectable="1"
                                selected="{{ Route::currentRouteName() == 'cart.show'}}"
                                :total="session('cart')->count()"/>
                        @endif

                        <x-menus.submenu
                            selectable="0"
                            uniqueName="submenu_user"
                            >
                            <x-slot:content>
                                <div class="pe-1">
                                    <img src="{{ Vite::asset('resources/img/photos/photo_example.jpeg') }}" class="w-11 h-11 min-w-11 min-h-11 rounded-full">
                                </div>
                                {{-- ATENÇÃO - ALTERAR FORMULA DE CALCULO DAS LARGURAS MÁXIMAS QUANDO O MENU FOR ALTERADO --}}
                                <div class="ps-1 sm:max-w-[calc(100vw-39rem)] md:max-w-[calc(100vw-41rem)] lg:max-w-[calc(100vw-46rem)] xl:max-w-[34rem] truncate">
                                    João Miguel da Silva Pereira Antunes
                                </div>
                            </x-slot>
                            <x-menus.submenu-item
                                content="My Disciplines"
                                selectable="0"
                                href="#"/>
                            <x-menus.submenu-item
                                content="My Teachers"
                                selectable="0"
                                href="#"/>
                            <x-menus.submenu-item
                                content="My Students"
                                selectable="0"
                                href="#"/>
                            <hr>
                            <x-menus.submenu-item
                                content="Profile"
                                selectable="0"
                                href="{{ route('profile.edit') }}"/>
                            <hr>
                            <form id="form_to_logout_from_menu" method="POST" action="{{ route('logout') }}" class="hidden">
                                @csrf
                            </form>
                            <a class="px-3 py-4 border-b-2 border-transparent
                                        text-sm font-medium leading-5 inline-flex h-auto
                                        text-gray-500 dark:text-gray-400
                                        hover:text-gray-700 dark:hover:text-gray-300
                                        hover:bg-gray-100 dark:hover:bg-gray-800
                                        focus:outline-none
                                        focus:text-gray-700 dark:focus:text-gray-300
                                        focus:bg-gray-100 dark:focus:bg-gray-800"
                                    href="#"
                                    onclick="event.preventDefault();
                                    document.getElementById('form_to_logout_from_menu').submit();">
                                Log Out
                            </a>
                        </x-menus.submenu>
                    </div>
                    <!-- Hamburger -->
                    <div class="absolute right-0 top-0 flex sm:hidden pt-3 pe-3 text-black dark:text-gray-50">
                        <button id="hamburger_btn">
                            <svg class="h-8 w-8" stroke="currentColor" fill="none" viewBox="0 0 24 24">
                                <path id="hamburger_btn_open" stroke-linecap="round" stroke-linejoin="round"
                                stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
                                <path class="invisible" id="hamburger_btn_close" stroke-linecap="round"
                                stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                        </button>
                    </div>
                </div>
            </div>
        </nav>

        <!-- Page Heading -->
        <header class="bg-white dark:bg-gray-900 shadow">
            <div class="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
                <h4 class="mb-1 text-base text-gray-500 dark:text-gray-400 leading-tight">
                    Department of Computer Engineering
                </h4>
                <h2 class="font-semibold text-xl text-gray-800 dark:text-gray-200 leading-tight">
                    @yield('header-title')
                </h2>
            </div>
        </header>

        <main>
            <div class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
                @if (session('alert-msg'))
                    <x-alert type="{{ session('alert-type') ?? 'info' }}">
                        {!! session('alert-msg') !!}
                    </x-alert>
                @endif
                @if (!$errors->isEmpty())
                        <x-alert type="warning" message="Operation failed because there are validation errors!"/>
                @endif
                @yield('main')
            </div>
        </main>
    </div>
</body>

</html>




69)  ----------------------------- -----------------------------

@extends('layouts.main')

@section('header-title', 'Profile')

@section('main')
<div class="min-h-screen flex flex-col justify-start items-center pt-6 sm:pt-0 bg-gray-100 dark:bg-gray-900">
    <div class="w-full sm:max-w-xl mt-6 px-6 py-4 bg-white dark:bg-gray-800 shadow-md overflow-hidden sm:rounded-lg">
        <x-slot name="header">
            <h2 class="font-semibold text-xl text-gray-800 dark:text-gray-200 leading-tight">
                {{ __('Profile') }}
            </h2>
        </x-slot>

        <div class="py-12">
            <div class="max-w-7xl mx-auto sm:px-6 lg:px-8 space-y-6">
                <div class="p-4 sm:p-8 bg-white dark:bg-gray-800 shadow sm:rounded-lg">
                    <div class="max-w-xl">
                        @include('profile.partials.update-profile-information-form')
                    </div>
                </div>

                <div class="p-4 sm:p-8 bg-white dark:bg-gray-800 shadow sm:rounded-lg">
                    <div class="max-w-xl">
                        @include('profile.partials.update-password-form')
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@endsection





70)  ----------------------------- -----------------------------

@extends('layouts.main')

@section('header-title', 'Confirm Password')

@section('main')
    <div class="min-h-screen flex flex-col justify-start items-center pt-6 sm:pt-0 bg-gray-100 dark:bg-gray-900">
        <div class="w-full sm:max-w-xl mt-6 px-6 py-4 bg-white dark:bg-gray-800 shadow-md overflow-hidden sm:rounded-lg">
            <div class="mb-4 text-sm text-gray-600 dark:text-gray-400">
                {{ __('This is a secure area of the application. Please confirm your password before continuing.') }}
            </div>

            <form method="POST" action="{{ route('password.confirm') }}">
                @csrf

                <!-- Password -->
                <div>
                    <x-input-label for="password" :value="__('Password')" />

                    <x-text-input id="password" class="block mt-1 w-full"
                                    type="password"
                                    name="password"
                                    required autocomplete="current-password" />

                    <x-input-error :messages="$errors->get('password')" class="mt-2" />
                </div>

                <div class="flex justify-end mt-4">
                    <x-primary-button>
                        {{ __('Confirm') }}
                    </x-primary-button>
                </div>
            </form>
        </div>
    </div>
@endsection




71)  ----------------------------- -----------------------------

@extends('layouts.main')

@section('header-title', 'Forgot Password')

@section('main')
    <div class="min-h-screen flex flex-col justify-start items-center pt-6 sm:pt-0 bg-gray-100 dark:bg-gray-900">
        <div class="w-full sm:max-w-xl mt-6 px-6 py-4 bg-white dark:bg-gray-800 shadow-md overflow-hidden sm:rounded-lg">
            <div class="mb-4 text-sm text-gray-600 dark:text-gray-400">
                {{ __('Forgot your password? No problem. Just let us know your email address and we will email you a password reset link that will allow you to choose a new one.') }}
            </div>

            <!-- Session Status -->
            <x-auth-session-status class="mb-4" :status="session('status')" />

            <form method="POST" action="{{ route('password.email') }}">
                @csrf

                <!-- Email Address -->
                <div>
                    <x-input-label for="email" :value="__('Email')" />
                    <x-text-input id="email" class="block mt-1 w-full" type="email" name="email" :value="old('email')" required autofocus />
                    <x-input-error :messages="$errors->get('email')" class="mt-2" />
                </div>

                <div class="flex items-center justify-end mt-4">
                    <x-primary-button>
                        {{ __('Email Password Reset Link') }}
                    </x-primary-button>
                </div>
            </form>
        </div>
    </div>
@endsection




72)  ----------------------------- -----------------------------

@extends('layouts.main')

@section('header-title', 'Reset Password')

@section('main')
    <div class="min-h-screen flex flex-col justify-start items-center pt-6 sm:pt-0 bg-gray-100 dark:bg-gray-900">
        <div class="w-full sm:max-w-xl mt-6 px-6 py-4 bg-white dark:bg-gray-800 shadow-md overflow-hidden sm:rounded-lg">
            <h2 class="text-xl my-6">Reset Password</h2>
            <form method="POST" action="{{ route('password.store') }}">
                @csrf

                <!-- Password Reset Token -->
                <input type="hidden" name="token" value="{{ $request->route('token') }}">

                <!-- Email Address -->
                <div>
                    <x-input-label for="email" :value="__('Email')" />
                    <x-text-input id="email" class="block mt-1 w-full" type="email" name="email" :value="old('email', $request->email)" required autofocus autocomplete="username" />
                    <x-input-error :messages="$errors->get('email')" class="mt-2" />
                </div>

                <!-- Password -->
                <div class="mt-4">
                    <x-input-label for="password" :value="__('Password')" />
                    <x-text-input id="password" class="block mt-1 w-full" type="password" name="password" required autocomplete="new-password" />
                    <x-input-error :messages="$errors->get('password')" class="mt-2" />
                </div>

                <!-- Confirm Password -->
                <div class="mt-4">
                    <x-input-label for="password_confirmation" :value="__('Confirm Password')" />

                    <x-text-input id="password_confirmation" class="block mt-1 w-full"
                                        type="password"
                                        name="password_confirmation" required autocomplete="new-password" />

                    <x-input-error :messages="$errors->get('password_confirmation')" class="mt-2" />
                </div>

                <div class="flex items-center justify-end mt-4">
                    <x-primary-button>
                        {{ __('Reset Password') }}
                    </x-primary-button>
                </div>
            </form>
        </div>
    </div>
@endsection





73)  ----------------------------- -----------------------------

@extends('layouts.main')

@section('header-title', 'Verify Email')

@section('main')
    <div class="min-h-screen flex flex-col justify-start items-center pt-6 sm:pt-0 bg-gray-100 dark:bg-gray-900">
        <div class="w-full sm:max-w-xl mt-6 px-6 py-4 bg-white dark:bg-gray-800 shadow-md overflow-hidden sm:rounded-lg">
            <h2 class="text-xl my-6">Email verification</h2>
            <div class="mb-4 text-sm text-gray-600 dark:text-gray-400">
                {{ __('Thanks for signing up! Before getting started, could you verify your email address by clicking on the link we just emailed to you? If you didn\'t receive the email, we will gladly send you another.') }}
            </div>

            @if (session('status') == 'verification-link-sent')
                <div class="mb-4 font-medium text-sm text-green-600 dark:text-green-400">
                    {{ __('A new verification link has been sent to the email address you provided during registration.') }}
                </div>
            @endif

            <div class="mt-4 flex items-center justify-between">
                <form method="POST" action="{{ route('verification.send') }}">
                    @csrf

                    <div>
                        <x-primary-button>
                            {{ __('Resend Verification Email') }}
                        </x-primary-button>
                    </div>
                </form>

                <form method="POST" action="{{ route('logout') }}">
                    @csrf

                    <button type="submit" class="underline text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 dark:focus:ring-offset-gray-800">
                        {{ __('Log Out') }}
                    </button>
                </form>
            </div>
        </div>
    </div>
@endsection




74)  ----------------------------- -----------------------------


<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <title>Department of Computer Engineering</title>
    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.bunny.net">
    <link href="https://fonts.bunny.net/css?family=figtree:400,500,600&display=swap" rel="stylesheet" />

    <!-- Scripts AND CSS Fileds -->
    @vite(['resources/css/app.css', 'resources/js/app.js'])
</head>

<body class="font-sans antialiased">
    <div class="min-h-screen bg-gray-100 dark:bg-gray-800">

        <!-- Navigation Menu -->
        <nav class="bg-white dark:bg-gray-900 border-b border-gray-100 dark:border-gray-800">
            <!-- Navigation Menu Full Container -->
            <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
                <!-- Logo + Menu Items + Hamburger -->
                <div class="relative flex flex-col sm:flex-row px-6 sm:px-0 grow justify-between">
                    <!-- Logo -->
                    <div class="shrink-0 -ms-4">
                        <a href="{{ route('home')}}">
                            <div class="h-16 w-40 bg-cover bg-[url('../img/politecnico_h.svg')] dark:bg-[url('../img/politecnico_h_white.svg')]"></div>
                        </a>
                    </div>

                    <!-- Menu Items -->
                    <div id="menu-container" class="grow flex flex-col sm:flex-row items-stretch
                    invisible h-0 sm:visible sm:h-auto">
                        <!-- Menu Item: Courses -->
                        <x-menus.menu-item
                            content="Courses"
                            href="{{ route('courses.showcase') }}"
                            selected="{{ Route::currentRouteName() == 'courses.showcase'}}"
                        />

                        <!-- Menu Item: Curricula -->
                        <x-menus.submenu-full-width
                            content="Curricula"
                            selectable="1"
                            selected="0"
                            uniqueName="submenu_curricula">
                            @foreach ($courses as $course)
                                <x-menus.submenu-item
                                :content="$course->fullName"
                                selectable="1"
                                selected="0"
                                href="{{ route('courses.curriculum', ['course' => $course]) }}"/>
                            @endforeach
                        </x-menus.submenu-full-width>

                        <!-- Menu Item: Disciplines -->
                        <x-menus.menu-item
                            content="Disciplines"
                            selectable="1"
                            href="{{ route('disciplines.index') }}"
                            selected="{{ Route::currentRouteName() == 'disciplines.index'}}"
                            />

                        <!-- Menu Item: Teachers -->
                        <x-menus.menu-item
                            content="Teachers"
                            selectable="1"
                            href="{{ route('teachers.index') }}"
                            selected="{{ Route::currentRouteName() == 'teachers.index'}}"
                            />

                        <!-- Menu Item: Others -->
                        <x-menus.submenu
                            selectable="0"
                            uniqueName="submenu_others"
                            content="More">
                                <x-menus.submenu-item
                                    content="Students"
                                    selectable="0"
                                    href="{{ route('students.index') }}" />
                                <x-menus.submenu-item
                                    content="Administratives"
                                    selectable="0"
                                    href="{{ route('administratives.index') }}" />
                                <hr>
                                <x-menus.submenu-item
                                    content="Departments"
                                    selectable="0"
                                    href="{{ route('departments.index') }}"/>
                                <x-menus.submenu-item
                                    content="Course Management"
                                    href="{{ route('courses.index') }}"/>
                        </x-menus.submenu>

                        <div class="grow"></div>

                        <!-- Menu Item: Cart -->
                        @if (session('cart'))
                            <x-menus.cart
                                :href="route('cart.show')"
                                selectable="1"
                                selected="{{ Route::currentRouteName() == 'cart.show'}}"
                                :total="session('cart')->count()"/>
                        @endif

                        @auth
                        <x-menus.submenu
                            selectable="0"
                            uniqueName="submenu_user"
                            >
                            <x-slot:content>
                                <div class="pe-1">
                                    <img src="{{ Auth::user()->photoFullUrl}}" class="w-11 h-11 min-w-11 min-h-11 rounded-full">
                                </div>
                                {{-- ATENÇÃO - ALTERAR FORMULA DE CALCULO DAS LARGURAS MÁXIMAS QUANDO O MENU FOR ALTERADO --}}
                                <div class="ps-1 sm:max-w-[calc(100vw-39rem)] md:max-w-[calc(100vw-41rem)] lg:max-w-[calc(100vw-46rem)] xl:max-w-[34rem] truncate">
                                    {{ Auth::user()->name }}
                                </div>
                            </x-slot>
                            <x-menus.submenu-item
                                content="My Disciplines"
                                selectable="0"
                                href="#"/>
                            <x-menus.submenu-item
                                content="My Teachers"
                                selectable="0"
                                href="#"/>
                            <x-menus.submenu-item
                                content="My Students"
                                selectable="0"
                                href="#"/>
                            <hr>
                            <x-menus.submenu-item
                                content="Profile"
                                selectable="0"
                                href="{{ route('profile.edit') }}"/>
                            <hr>
                            <form id="form_to_logout_from_menu" method="POST" action="{{ route('logout') }}" class="hidden">
                                @csrf
                            </form>
                            <a class="px-3 py-4 border-b-2 border-transparent
                                        text-sm font-medium leading-5 inline-flex h-auto
                                        text-gray-500 dark:text-gray-400
                                        hover:text-gray-700 dark:hover:text-gray-300
                                        hover:bg-gray-100 dark:hover:bg-gray-800
                                        focus:outline-none
                                        focus:text-gray-700 dark:focus:text-gray-300
                                        focus:bg-gray-100 dark:focus:bg-gray-800"
                                    href="#"
                                    onclick="event.preventDefault();
                                    document.getElementById('form_to_logout_from_menu').submit();">
                                Log Out
                            </a>
                        </x-menus.submenu>
                        @else
                        <!-- Menu Item: Login -->
                        <x-menus.menu-item
                            content="Login"
                            selectable="1"
                            href="{{ route('login') }}"
                            selected="{{ Route::currentRouteName() == 'login'}}"
                            />

                        @endauth
                    </div>
                    <!-- Hamburger -->
                    <div class="absolute right-0 top-0 flex sm:hidden pt-3 pe-3 text-black dark:text-gray-50">
                        <button id="hamburger_btn">
                            <svg class="h-8 w-8" stroke="currentColor" fill="none" viewBox="0 0 24 24">
                                <path id="hamburger_btn_open" stroke-linecap="round" stroke-linejoin="round"
                                stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
                                <path class="invisible" id="hamburger_btn_close" stroke-linecap="round"
                                stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                        </button>
                    </div>
                </div>
            </div>
        </nav>

        <!-- Page Heading -->
        <header class="bg-white dark:bg-gray-900 shadow">
            <div class="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
                <h4 class="mb-1 text-base text-gray-500 dark:text-gray-400 leading-tight">
                    Department of Computer Engineering
                </h4>
                <h2 class="font-semibold text-xl text-gray-800 dark:text-gray-200 leading-tight">
                    @yield('header-title')
                </h2>
            </div>
        </header>

        <main>
            <div class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
                @if (session('alert-msg'))
                    <x-alert type="{{ session('alert-type') ?? 'info' }}">
                        {!! session('alert-msg') !!}
                    </x-alert>
                @endif
                @if (!$errors->isEmpty())
                        <x-alert type="warning" message="Operation failed because there are validation errors!"/>
                @endif
                @yield('main')
            </div>
        </main>
    </div>
</body>

</html>







79)  ----------------------------- -----------------------------

<?php

use App\Http\Controllers\ProfileController;
use App\Http\Controllers\AdministrativeController;
use App\Http\Controllers\CourseController;
use App\Http\Controllers\DisciplineController;
use App\Http\Controllers\DepartmentController;
use App\Http\Controllers\TeacherController;
use App\Http\Controllers\StudentController;
use App\Http\Controllers\CartController;
use Illuminate\Support\Facades\Route;


/* ----- PUBLIC ROUTES ----- */
Route::view('/', 'home')->name('home');
Route::get('courses/showcase', [CourseController::class, 'showCase'])->name('courses.showcase');
Route::get('courses/{course}/curriculum', [CourseController::class, 'showCurriculum'])->name('courses.curriculum');

/* ----- Non-Verified users ----- */
Route::middleware('auth')->group(function () {
    Route::get('/profile', [ProfileController::class, 'edit'])->name('profile.edit');
    Route::patch('/profile', [ProfileController::class, 'update'])->name('profile.update');
    Route::delete('/profile', [ProfileController::class, 'destroy'])->name('profile.destroy');
});

/* ----- Verified users ----- */
Route::middleware('auth', 'verified')->group(function () {

    Route::view('/dashboard', 'dashboard')->name('dashboard');

    Route::delete('courses/{course}/image', [CourseController::class, 'destroyImage'])
        ->name('courses.image.destroy');

        //Course show is public, all other routes are not public
    Route::resource('courses', CourseController::class)->except(['show']);

    Route::resource('departments', DepartmentController::class);

    //Disciplines index and show are public
    Route::resource('disciplines', DisciplineController::class)->except(['index', 'show']);

    Route::delete('teachers/{teacher}/photo', [TeacherController::class, 'destroyPhoto'])
        ->name('teachers.photo.destroy');
    Route::resource('teachers', TeacherController::class);

    Route::delete('students/{student}/photo', [StudentController::class, 'destroyPhoto'])
        ->name('students.photo.destroy');
    Route::resource('students', StudentController::class);

    Route::delete('administratives/{administrative}/photo', [AdministrativeController::class, 'destroyPhoto'])
        ->name('administratives.photo.destroy');
    Route::resource('administratives', AdministrativeController::class);

    // Add a discipline to the cart:
    Route::post('cart/{discipline}', [CartController::class, 'addToCart'])
        ->name('cart.add');
    // Remove a discipline from the cart:
    Route::delete('cart/{discipline}', [CartController::class, 'removeFromCart'])
        ->name('cart.remove');
    // Show the cart:
    Route::get('cart', [CartController::class, 'show'])->name('cart.show');
    // Confirm (store) the cart and save disciplines registration on the database:
    Route::post('cart', [CartController::class, 'confirm'])->name('cart.confirm');
    // Clear the cart:
    Route::delete('cart', [CartController::class, 'destroy'])->name('cart.destroy');
});

/* ----- OTHER PUBLIC ROUTES ----- */
//Course show is public.
Route::resource('courses', CourseController::class)->only(['show']);
//Disciplines index and show are public
Route::resource('disciplines', DisciplineController::class)->only(['index', 'show']);


require __DIR__ . '/auth.php';







82)  ----------------------------- -----------------------------

<?php

namespace App\Providers;

use Illuminate\Support\ServiceProvider;
use Illuminate\Support\Facades\View;
use Illuminate\Support\Facades\Gate;
use App\Models\Course;
use App\Models\User;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     */
    public function register(): void
    {
        //
    }

    /**
     * Bootstrap any application services.
     */
    public function boot(): void
    {
        Gate::define('admin', function (User $user) {
            // Only "administrator" users can "admin"
            return $user->admin;
        });
        try {
            // View::share adds data (variables) that are shared through all views (like global data)
            View::share('courses', Course::orderBy('type')->orderBy('name')->get());
        } catch (\Exception $e) {
            // If no Database exists, or Course table does not exist yet, an error will occour
            // This will ignore this error to avoid problems before migration is correctly executed
            // (When executing "composer update", when executing "php artisan migrate", etc)
        }
    }
}




83)  ----------------------------- -----------------------------

<?php

use App\Http\Controllers\ProfileController;
use App\Http\Controllers\AdministrativeController;
use App\Http\Controllers\CourseController;
use App\Http\Controllers\DisciplineController;
use App\Http\Controllers\DepartmentController;
use App\Http\Controllers\TeacherController;
use App\Http\Controllers\StudentController;
use App\Http\Controllers\CartController;
use Illuminate\Support\Facades\Route;


/* ----- PUBLIC ROUTES ----- */
Route::view('/', 'home')->name('home');
Route::get('courses/showcase', [CourseController::class, 'showCase'])->name('courses.showcase');
Route::get('courses/{course}/curriculum', [CourseController::class, 'showCurriculum'])->name('courses.curriculum');

/* ----- Non-Verified users ----- */
Route::middleware('auth')->group(function () {
    Route::get('/profile', [ProfileController::class, 'edit'])->name('profile.edit');
    Route::patch('/profile', [ProfileController::class, 'update'])->name('profile.update');
    Route::delete('/profile', [ProfileController::class, 'destroy'])->name('profile.destroy');
});

/* ----- Verified users ----- */
Route::middleware('auth', 'verified')->group(function () {

    Route::view('/dashboard', 'dashboard')->name('dashboard');

    Route::delete('courses/{course}/image', [CourseController::class, 'destroyImage'])
        ->name('courses.image.destroy');

    //Course show is public and index for any authenticated user
    Route::resource('courses', CourseController::class)->only(['index']);

    //Department show and index are accessible to any authenticated user
    Route::resource('departments', DepartmentController::class)->only(['index', 'show']);

    //Disciplines index and show are public
    Route::resource('disciplines', DisciplineController::class)->except(['index', 'show']);

    Route::delete('teachers/{teacher}/photo', [TeacherController::class, 'destroyPhoto'])
        ->name('teachers.photo.destroy');
    Route::resource('teachers', TeacherController::class);

    Route::delete('students/{student}/photo', [StudentController::class, 'destroyPhoto'])
        ->name('students.photo.destroy');
    Route::resource('students', StudentController::class);

    Route::delete('administratives/{administrative}/photo', [AdministrativeController::class, 'destroyPhoto'])
        ->name('administratives.photo.destroy');
    Route::resource('administratives', AdministrativeController::class);

    // Add a discipline to the cart:
    Route::post('cart/{discipline}', [CartController::class, 'addToCart'])
        ->name('cart.add');
    // Remove a discipline from the cart:
    Route::delete('cart/{discipline}', [CartController::class, 'removeFromCart'])
        ->name('cart.remove');
    // Show the cart:
    Route::get('cart', [CartController::class, 'show'])->name('cart.show');
    // Confirm (store) the cart and save disciplines registration on the database:
    Route::post('cart', [CartController::class, 'confirm'])->name('cart.confirm');
    // Clear the cart:
    Route::delete('cart', [CartController::class, 'destroy'])->name('cart.destroy');

    Route::middleware('can:admin')->group(function () {
        //Course insert, update and delete related routes are for admin only
        Route::resource('courses', CourseController::class)->except(['index', 'show']);
        //Department insert, update and delete related routes are for admin only
        Route::resource('departments', DepartmentController::class)->except(['index', 'show']);
    });
});

/* ----- OTHER PUBLIC ROUTES ----- */
//Course show is public.
Route::resource('courses', CourseController::class)->only(['show']);
//Disciplines index and show are public
Route::resource('disciplines', DisciplineController::class)->only(['index', 'show']);

require __DIR__ . '/auth.php';







86)  ----------------------------- -----------------------------

php artisan make:policy StudentPolicy




87)  ----------------------------- -----------------------------

<?php

namespace App\Policies;

use App\Models\Student;
use App\Models\User;

class StudentPolicy
{
    public function before(?User $user, string $ability): bool|null
    {
        if ($user?->admin) {
            return true;
        }
        // When "Before" returns null, other methods (eg. viewAny, view, etc...) will be
        // used to check the user authorizaiton
        return null;
    }

    public function viewAny(User $user): bool
    {
        return $user->type == 'T' || $user->type == 'A';
    }

    public function view(User $user, Student $student): bool
    {
        if ($user->type == 'A' || ($user->type == 'S' && $user->id == $student->user_id)) {
            return true;
        }
        // If user is teacher, then he can view the detail information of his students only
        if ($user->type == 'T') {
            // ID set of disciplines that user teaches:
            $disciplinesOfTeacherSet = $user->teacher->disciplines->pluck('id')->toArray();
            // ID set of disciplines that the student is enrolled:
            $disciplinesOfStudentSet = $student->disciplines->pluck('id')->toArray();
            return count(array_intersect($disciplinesOfTeacherSet, $disciplinesOfStudentSet)) >= 1;
        }
        return false;
    }


    // Alternative code for the method view:
    // public function view(User $user, Student $student): bool
    // {
    //     if ($user->type == 'A' || ($user->type == 'S' && $user->id == $student->user_id)) {
    //         return true;
    //     }
    //     // If user is teacher, then he can view the detail information
    //     // of his students only
    //     if ($user->type == 'T') {
    //         // ID set of disciplines that he teaches:
    //         $disciplinesOfTeacherSet = $user->teacher->disciplines->pluck('id')->toArray();
    //         // Total disciplines of the student that are in the same set as the disciplines that he teaches
    //         $total = $student->disciplines()->whereIntegerInRaw('id', $disciplinesOfTeacherSet)->count();
    //         return  $total >= 1;
    //     }
    //     return false;
    // }

    public function create(User $user): bool
    {
        return $user->type == 'A';
    }

    public function update(User $user, Student $student): bool
    {
        return $user->type == 'A';
    }

    public function delete(User $user, Student $student): bool
    {
        return $user->type == 'A';
    }
}




88)  ----------------------------- -----------------------------


<?php

use App\Http\Controllers\ProfileController;
use App\Http\Controllers\AdministrativeController;
use App\Http\Controllers\CourseController;
use App\Http\Controllers\DisciplineController;
use App\Http\Controllers\DepartmentController;
use App\Http\Controllers\TeacherController;
use App\Http\Controllers\StudentController;
use App\Http\Controllers\CartController;
use Illuminate\Support\Facades\Route;
use App\Models\Student;

/* ----- PUBLIC ROUTES ----- */
Route::view('/', 'home')->name('home');
Route::get('courses/showcase', [CourseController::class, 'showCase'])->name('courses.showcase');
Route::get('courses/{course}/curriculum', [CourseController::class, 'showCurriculum'])->name('courses.curriculum');

/* ----- Non-Verified users ----- */
Route::middleware('auth')->group(function () {
    Route::get('/profile', [ProfileController::class, 'edit'])->name('profile.edit');
    Route::patch('/profile', [ProfileController::class, 'update'])->name('profile.update');
    Route::delete('/profile', [ProfileController::class, 'destroy'])->name('profile.destroy');
});

/* ----- Verified users ----- */
Route::middleware('auth', 'verified')->group(function () {

    Route::view('/dashboard', 'dashboard')->name('dashboard');

    Route::delete('courses/{course}/image', [CourseController::class, 'destroyImage'])
        ->name('courses.image.destroy');

    //Course show is public and index for any authenticated user
    Route::resource('courses', CourseController::class)->only(['index']);

    //Department show and index are accessible to any authenticated user
    Route::resource('departments', DepartmentController::class)->only(['index', 'show']);

    //Disciplines index and show are public
    Route::resource('disciplines', DisciplineController::class)->except(['index', 'show']);

    Route::delete('teachers/{teacher}/photo', [TeacherController::class, 'destroyPhoto'])
        ->name('teachers.photo.destroy');
    Route::resource('teachers', TeacherController::class);


    // Route::delete('students/{student}/photo', [StudentController::class, 'destroyPhoto'])
    //     ->name('students.photo.destroy');
    // Route::resource('students', StudentController::class);
    Route::delete('students/{student}/photo', [StudentController::class, 'destroyPhoto'])
        ->name('students.photo.destroy')
        ->can('update', 'student');
    Route::get('students', [StudentController::class, 'index'])->name('students.index')
        ->can('viewAny', Student::class);
    Route::get('students/{student}', [StudentController::class, 'show'])
        ->name('students.show')
        ->can('view', 'student');
    Route::get('students/create', [StudentController::class, 'create'])
        ->name('students.create')
        ->can('create', Student::class);
    Route::post('students', [StudentController::class, 'store'])
        ->name('students.store')
        ->can('create', Student::class);
    Route::get('students/{student}/edit', [StudentController::class, 'edit'])
        ->name('students.edit')
        ->can('update', 'student');
    Route::put('students/{student}', [StudentController::class, 'update'])
        ->name('students.update')
        ->can('update', 'student');
    Route::delete('students/{student}', [StudentController::class, 'destroy'])
        ->name('students.destroy')
        ->can('delete', 'student');


    Route::delete('administratives/{administrative}/photo', [AdministrativeController::class, 'destroyPhoto'])
        ->name('administratives.photo.destroy');
    Route::resource('administratives', AdministrativeController::class);

    // Add a discipline to the cart:
    Route::post('cart/{discipline}', [CartController::class, 'addToCart'])
        ->name('cart.add');
    // Remove a discipline from the cart:
    Route::delete('cart/{discipline}', [CartController::class, 'removeFromCart'])
        ->name('cart.remove');
    // Show the cart:
    Route::get('cart', [CartController::class, 'show'])->name('cart.show');
    // Confirm (store) the cart and save disciplines registration on the database:
    Route::post('cart', [CartController::class, 'confirm'])->name('cart.confirm');
    // Clear the cart:
    Route::delete('cart', [CartController::class, 'destroy'])->name('cart.destroy');

    Route::middleware('can:admin')->group(function () {
        //Course insert, update and delete related routes are for admin only
        Route::resource('courses', CourseController::class)->except(['index', 'show']);
        //Department insert, update and delete related routes are for admin only
        Route::resource('departments', DepartmentController::class)->except(['index', 'show']);
    });
});

/* ----- OTHER PUBLIC ROUTES ----- */
//Course show is public.
Route::resource('courses', CourseController::class)->only(['show']);
//Disciplines index and show are public
Route::resource('disciplines', DisciplineController::class)->only(['index', 'show']);

require __DIR__ . '/auth.php';







90)  ----------------------------- -----------------------------


<?php

use App\Http\Controllers\ProfileController;
use App\Http\Controllers\AdministrativeController;
use App\Http\Controllers\CourseController;
use App\Http\Controllers\DisciplineController;
use App\Http\Controllers\DepartmentController;
use App\Http\Controllers\TeacherController;
use App\Http\Controllers\StudentController;
use App\Http\Controllers\CartController;
use Illuminate\Support\Facades\Route;
use App\Models\Student;

/* ----- PUBLIC ROUTES ----- */
Route::view('/', 'home')->name('home');
Route::get('courses/showcase', [CourseController::class, 'showCase'])->name('courses.showcase');
Route::get('courses/{course}/curriculum', [CourseController::class, 'showCurriculum'])->name('courses.curriculum');

/* ----- Non-Verified users ----- */
Route::middleware('auth')->group(function () {
    Route::get('/profile', [ProfileController::class, 'edit'])->name('profile.edit');
    Route::patch('/profile', [ProfileController::class, 'update'])->name('profile.update');
    Route::delete('/profile', [ProfileController::class, 'destroy'])->name('profile.destroy');
});

/* ----- Verified users ----- */
Route::middleware('auth', 'verified')->group(function () {

    Route::view('/dashboard', 'dashboard')->name('dashboard');

    Route::delete('courses/{course}/image', [CourseController::class, 'destroyImage'])
        ->name('courses.image.destroy');

    //Course show is public and index for any authenticated user
    Route::resource('courses', CourseController::class)->only(['index']);

    //Department show and index are accessible to any authenticated user
    Route::resource('departments', DepartmentController::class)->only(['index', 'show']);

    //Disciplines index and show are public
    Route::resource('disciplines', DisciplineController::class)->except(['index', 'show']);

    Route::delete('teachers/{teacher}/photo', [TeacherController::class, 'destroyPhoto'])
        ->name('teachers.photo.destroy');
    Route::resource('teachers', TeacherController::class);


    Route::delete('students/{student}/photo', [StudentController::class, 'destroyPhoto'])
        ->name('students.photo.destroy')
        ->can('update', 'student');
    Route::resource('students', StudentController::class);
    // Route::delete('students/{student}/photo', [StudentController::class, 'destroyPhoto'])
    //     ->name('students.photo.destroy')
    //     ->can('update', 'student');
    // Route::get('students', [StudentController::class, 'index'])->name('students.index')
    //     ->can('viewAny', Student::class);
    // Route::get('students/{student}', [StudentController::class, 'show'])
    //     ->name('students.show')
    //     ->can('view', 'student');
    // Route::get('students/create', [StudentController::class, 'create'])
    //     ->name('students.create')
    //     ->can('create', Student::class);
    // Route::post('students', [StudentController::class, 'store'])
    //     ->name('students.store')
    //     ->can('create', Student::class);
    // Route::get('students/{student}/edit', [StudentController::class, 'edit'])
    //     ->name('students.edit')
    //     ->can('update', 'student');
    // Route::put('students/{student}', [StudentController::class, 'update'])
    //     ->name('students.update')
    //     ->can('update', 'student');
    // Route::delete('students/{student}', [StudentController::class, 'destroy'])
    //     ->name('students.destroy')
    //     ->can('delete', 'student');


    Route::delete('administratives/{administrative}/photo', [AdministrativeController::class, 'destroyPhoto'])
        ->name('administratives.photo.destroy');
    Route::resource('administratives', AdministrativeController::class);

    // Add a discipline to the cart:
    Route::post('cart/{discipline}', [CartController::class, 'addToCart'])
        ->name('cart.add');
    // Remove a discipline from the cart:
    Route::delete('cart/{discipline}', [CartController::class, 'removeFromCart'])
        ->name('cart.remove');
    // Show the cart:
    Route::get('cart', [CartController::class, 'show'])->name('cart.show');
    // Confirm (store) the cart and save disciplines registration on the database:
    Route::post('cart', [CartController::class, 'confirm'])->name('cart.confirm');
    // Clear the cart:
    Route::delete('cart', [CartController::class, 'destroy'])->name('cart.destroy');

    Route::middleware('can:admin')->group(function () {
        //Course insert, update and delete related routes are for admin only
        Route::resource('courses', CourseController::class)->except(['index', 'show']);
        //Department insert, update and delete related routes are for admin only
        Route::resource('departments', DepartmentController::class)->except(['index', 'show']);
    });
});

/* ----- OTHER PUBLIC ROUTES ----- */
//Course show is public.
Route::resource('courses', CourseController::class)->only(['show']);
//Disciplines index and show are public
Route::resource('disciplines', DisciplineController::class)->only(['index', 'show']);

require __DIR__ . '/auth.php';







91)  ----------------------------- -----------------------------

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Student;
use App\Models\User;
use Illuminate\View\View;
use Illuminate\Http\RedirectResponse;
use App\Http\Requests\StudentFormRequest;
use App\Models\Course;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\DB;
use Illuminate\Foundation\Auth\Access\AuthorizesRequests;

class StudentController extends \Illuminate\Routing\Controller
{
    use AuthorizesRequests;

    public function __construct()
    {
        $this->authorizeResource(Student::class);
    }

    public function index(Request $request): View
    {
        $courseOptions = Course::orderBy('type')->orderBy('name')->get()->pluck('fullName', 'abbreviation')->toArray();
        $courseOptions = array_merge([null => 'Any course'], $courseOptions);

        $filterByCourse = $request->query('course');
        $filterByName = $request->query('name');
        $studentsQuery = Student::query();
        if ($filterByCourse !== null) {
            $studentsQuery->where('course', $filterByCourse);
        }
        // Next 3 lines are required when sorting by name:
        // ->join is necessary so that we have access to the users.name - to be able to order by "users.name"
        // ->select avoids bringing to many fields (that may conflict with each other)
        $studentsQuery
            ->join('users', 'users.id', '=', 'students.user_id')
            ->select( 'students.*')
            ->orderBy('users.name');

        // Since we are joining students and users, we can simplify the code to search by name
        if ($filterByName !== null) {
            $studentsQuery
                ->where('users.type', 'S')
                ->where('users.name', 'like', "%$filterByName%");
        }
        // Next line were used to filter by name, when there were no join clauses
        // if ($filterByName !== null) {
        //     $usersIds = User::where('type', 'S')
        //         ->where('name', 'like', "%$filterByName%")
        //         ->pluck('id')
        //         ->toArray();
        //     $studentsIds = Student::whereIntegerInRaw('user_id', $usersIds)
        //         ->pluck('id')
        //         ->toArray();
        //     $studentsQuery->whereIntegerInRaw('students.id', $studentsIds);
        // }

        $students = $studentsQuery
            ->with('user')
            ->with('courseRef')
            ->paginate(20)
            ->withQueryString();

        return view(
            'students.index',
            compact('students', 'courseOptions', 'filterByCourse', 'filterByName')
        );
    }

    public function show(Student $student): View
    {
        return view('students.show')->with('student', $student);
    }

    public function create(): View
    {
        $newStudent = new Student();
        // Next 2 lines ensure that the expression $newStudent->user->name is valid
        $newUser = new User();
        $newUser->type= 'S';
        $newStudent->user = $newUser;
        $newStudent->course = 'EI';
        return view('students.create')
            ->with('student', $newStudent);
    }

    public function store(StudentFormRequest $request): RedirectResponse
    {
        $validatedData = $request->validated();
        $newStudent = DB::transaction(function () use ($validatedData, $request) {
            $newUser = new User();
            $newUser->type = 'S';
            $newUser->name = $validatedData['name'];
            $newUser->email = $validatedData['email'];
            // Student is never an administrator
            $newUser->admin = 0;
            $newUser->gender = $validatedData['gender'];
            // Initial password is always 123
            $newUser->password = bcrypt('123');
            $newUser->save();
            $newStudent = new Student();
            $newStudent->user_id = $newUser->id;
            $newStudent->course = $validatedData['course'];
            $newStudent->number = $validatedData['number'];
            $newStudent->save();
            if ($request->hasFile('photo_file')) {
                $path = $request->photo_file->store('public/photos');
                $newUser->photo_url = basename($path);
                $newUser->save();
            }
            return $newStudent;
        });
        $url = route('students.show', ['student' => $newStudent]);
        $htmlMessage = "Student <a href='$url'><u>{$newStudent->user->name}</u></a> has been created successfully!";
        return redirect()->route('students.index')
            ->with('alert-type', 'success')
            ->with('alert-msg', $htmlMessage);
    }

    public function edit(Student $student): View
    {
        return view('students.edit')
            ->with('student', $student);
    }

    public function update(StudentFormRequest $request, Student $student): RedirectResponse
    {
        $validatedData = $request->validated();
        $student = DB::transaction(function () use ($validatedData, $student, $request) {
            $student->course = $validatedData['course'];
            $student->number = $validatedData['number'];
            $student->save();
            $student->user->type = 'S';
            $student->user->name = $validatedData['name'];
            $student->user->email = $validatedData['email'];
            // Student is never an administrator
            $student->user->admin = 0;
            $student->user->gender = $validatedData['gender'];
            $student->user->save();
            if ($request->hasFile('photo_file')) {
                // Delete previous file (if any)
                if (
                    $student->user->photo_url &&
                    Storage::fileExists('public/photos/' . $student->user->photo_url)
                ) {
                    Storage::delete('public/photos/' . $student->user->photo_url);
                }
                $path = $request->photo_file->store('public/photos');
                $student->user->photo_url = basename($path);
                $student->user->save();
            }
            return $student;
        });
        $url = route('students.show', ['student' => $student]);
        $htmlMessage = "Student <a href='$url'><u>{$student->user->name}</u></a> has been updated successfully!";
        return redirect()->route('students.index')
            ->with('alert-type', 'success')
            ->with('alert-msg', $htmlMessage);
    }

    public function destroy(Student $student): RedirectResponse
    {
        try {
            $url = route('students.show', ['student' => $student]);
            $totalStudentsDisciplines = DB::scalar(
                'select count(*) from students_disciplines where students_id = ?',
                [$student->id]
            );
            if ($totalStudentsDisciplines == 0) {
                DB::transaction(function () use ($student) {
                    $fileToDelete = $student->user->photo_url;
                    $student->delete();
                    $student->user->delete();
                    if ($fileToDelete) {
                        if (Storage::fileExists('public/photos/' . $fileToDelete)) {
                            Storage::delete('public/photos/' . $fileToDelete);
                        }
                    }
                });
                $alertType = 'success';
                $alertMsg = "Student {$student->user->name} has been deleted successfully!";
            } else {
                $alertType = 'warning';
                $gender = $student->user->gender == 'M' ? 'he' : 'she';
                $justification = match (true) {
                    $totalStudentsDisciplines <= 0 => "",
                    $totalStudentsDisciplines == 1 => "$gender is enrolled in 1 discipline",
                    $totalStudentsDisciplines > 1 => "$gender is enrolled in $totalStudentsDisciplines disciplines",
                };
                $alertMsg = "Student <a href='$url'><u>{$student->user->name}</u></a> cannot be deleted because $justification.";
            }
        } catch (\Exception $error) {
            $alertType = 'danger';
            $alertMsg = "It was not possible to delete the student
                            <a href='$url'><u>{$student->user->name}</u></a>
                            because there was an error with the operation!";
        }
        return redirect()->route('students.index')
            ->with('alert-type', $alertType)
            ->with('alert-msg', $alertMsg);
    }

    public function destroyPhoto(Student $student): RedirectResponse
    {
        if ($student->user->photo_url) {
            if (Storage::fileExists('public/photos/' . $student->user->photo_url)) {
                Storage::delete('public/photos/' . $student->user->photo_url);
            }
            $student->user->photo_url = null;
            $student->user->save();
            return redirect()->back()
                ->with('alert-type', 'success')
                ->with('alert-msg', "Photo of student {$student->user->name} has been deleted.");
        }
        return redirect()->back();
    }

}




96)  ----------------------------- -----------------------------

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <title>Department of Computer Engineering</title>
    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.bunny.net">
    <link href="https://fonts.bunny.net/css?family=figtree:400,500,600&display=swap" rel="stylesheet" />

    <!-- Scripts AND CSS Fileds -->
    @vite(['resources/css/app.css', 'resources/js/app.js'])
</head>

<body class="font-sans antialiased">
    <div class="min-h-screen bg-gray-100 dark:bg-gray-800">

        <!-- Navigation Menu -->
        <nav class="bg-white dark:bg-gray-900 border-b border-gray-100 dark:border-gray-800">
            <!-- Navigation Menu Full Container -->
            <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
                <!-- Logo + Menu Items + Hamburger -->
                <div class="relative flex flex-col sm:flex-row px-6 sm:px-0 grow justify-between">
                    <!-- Logo -->
                    <div class="shrink-0 -ms-4">
                        <a href="{{ route('home')}}">
                            <div class="h-16 w-40 bg-cover bg-[url('../img/politecnico_h.svg')] dark:bg-[url('../img/politecnico_h_white.svg')]"></div>
                        </a>
                    </div>

                    <!-- Menu Items -->
                    <div id="menu-container" class="grow flex flex-col sm:flex-row items-stretch
                    invisible h-0 sm:visible sm:h-auto">
                        <!-- Menu Item: Courses -->
                        <x-menus.menu-item
                            content="Courses"
                            href="{{ route('courses.showcase') }}"
                            selected="{{ Route::currentRouteName() == 'courses.showcase'}}"
                        />

                        <!-- Menu Item: Curricula -->
                        <x-menus.submenu-full-width
                            content="Curricula"
                            selectable="1"
                            selected="0"
                            uniqueName="submenu_curricula">
                            @foreach ($courses as $course)
                                <x-menus.submenu-item
                                :content="$course->fullName"
                                selectable="1"
                                selected="0"
                                href="{{ route('courses.curriculum', ['course' => $course]) }}"/>
                            @endforeach
                        </x-menus.submenu-full-width>

                        <!-- Menu Item: Disciplines -->
                        <x-menus.menu-item
                            content="Disciplines"
                            selectable="1"
                            href="{{ route('disciplines.index') }}"
                            selected="{{ Route::currentRouteName() == 'disciplines.index'}}"
                            />

                        @auth
                        <!-- Menu Item: Teachers -->
                        <x-menus.menu-item
                            content="Teachers"
                            selectable="1"
                            href="{{ route('teachers.index') }}"
                            selected="{{ Route::currentRouteName() == 'teachers.index'}}"
                            />

                        <!-- Menu Item: Others -->
                        <x-menus.submenu
                            selectable="0"
                            uniqueName="submenu_others"
                            content="More">
                                <x-menus.submenu-item
                                    content="Students"
                                    selectable="0"
                                    href="{{ route('students.index') }}" />
                                <x-menus.submenu-item
                                    content="Administratives"
                                    selectable="0"
                                    href="{{ route('administratives.index') }}" />
                                <hr>
                                <x-menus.submenu-item
                                    content="Departments"
                                    selectable="0"
                                    href="{{ route('departments.index') }}"/>
                                <x-menus.submenu-item
                                    content="Course Management"
                                    href="{{ route('courses.index') }}"/>
                        </x-menus.submenu>
                        @endauth

                        <div class="grow"></div>

                        <!-- Menu Item: Cart -->
                        @if (session('cart'))
                            <x-menus.cart
                                :href="route('cart.show')"
                                selectable="1"
                                selected="{{ Route::currentRouteName() == 'cart.show'}}"
                                :total="session('cart')->count()"/>
                        @endif

                        @auth
                        <x-menus.submenu
                            selectable="0"
                            uniqueName="submenu_user"
                            >
                            <x-slot:content>
                                <div class="pe-1">
                                    <img src="{{ Auth::user()->photoFullUrl}}" class="w-11 h-11 min-w-11 min-h-11 rounded-full">
                                </div>
                                {{-- ATENÇÃO - ALTERAR FORMULA DE CALCULO DAS LARGURAS MÁXIMAS QUANDO O MENU FOR ALTERADO --}}
                                <div class="ps-1 sm:max-w-[calc(100vw-39rem)] md:max-w-[calc(100vw-41rem)] lg:max-w-[calc(100vw-46rem)] xl:max-w-[34rem] truncate">
                                    {{ Auth::user()->name }}
                                </div>
                            </x-slot>
                            <x-menus.submenu-item
                                content="My Disciplines"
                                selectable="0"
                                href="#"/>
                            <x-menus.submenu-item
                                content="My Teachers"
                                selectable="0"
                                href="#"/>
                            <x-menus.submenu-item
                                content="My Students"
                                selectable="0"
                                href="#"/>
                            <hr>
                            <x-menus.submenu-item
                                content="Profile"
                                selectable="0"
                                href="{{ route('profile.edit') }}"/>
                            <hr>
                            <form id="form_to_logout_from_menu" method="POST" action="{{ route('logout') }}" class="hidden">
                                @csrf
                            </form>
                            <a class="px-3 py-4 border-b-2 border-transparent
                                        text-sm font-medium leading-5 inline-flex h-auto
                                        text-gray-500 dark:text-gray-400
                                        hover:text-gray-700 dark:hover:text-gray-300
                                        hover:bg-gray-100 dark:hover:bg-gray-800
                                        focus:outline-none
                                        focus:text-gray-700 dark:focus:text-gray-300
                                        focus:bg-gray-100 dark:focus:bg-gray-800"
                                    href="#"
                                    onclick="event.preventDefault();
                                    document.getElementById('form_to_logout_from_menu').submit();">
                                Log Out
                            </a>
                        </x-menus.submenu>
                        @else
                        <!-- Menu Item: Login -->
                        <x-menus.menu-item
                            content="Login"
                            selectable="1"
                            href="{{ route('login') }}"
                            selected="{{ Route::currentRouteName() == 'login'}}"
                            />

                        @endauth
                    </div>
                    <!-- Hamburger -->
                    <div class="absolute right-0 top-0 flex sm:hidden pt-3 pe-3 text-black dark:text-gray-50">
                        <button id="hamburger_btn">
                            <svg class="h-8 w-8" stroke="currentColor" fill="none" viewBox="0 0 24 24">
                                <path id="hamburger_btn_open" stroke-linecap="round" stroke-linejoin="round"
                                stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
                                <path class="invisible" id="hamburger_btn_close" stroke-linecap="round"
                                stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                        </button>
                    </div>
                </div>
            </div>
        </nav>

        <!-- Page Heading -->
        <header class="bg-white dark:bg-gray-900 shadow">
            <div class="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
                <h4 class="mb-1 text-base text-gray-500 dark:text-gray-400 leading-tight">
                    Department of Computer Engineering
                </h4>
                <h2 class="font-semibold text-xl text-gray-800 dark:text-gray-200 leading-tight">
                    @yield('header-title')
                </h2>
            </div>
        </header>

        <main>
            <div class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
                @if (session('alert-msg'))
                    <x-alert type="{{ session('alert-type') ?? 'info' }}">
                        {!! session('alert-msg') !!}
                    </x-alert>
                @endif
                @if (!$errors->isEmpty())
                        <x-alert type="warning" message="Operation failed because there are validation errors!"/>
                @endif
                @yield('main')
            </div>
        </main>
    </div>
</body>

</html>







98)  ----------------------------- -----------------------------

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <title>Department of Computer Engineering</title>
    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.bunny.net">
    <link href="https://fonts.bunny.net/css?family=figtree:400,500,600&display=swap" rel="stylesheet" />

    <!-- Scripts AND CSS Fileds -->
    @vite(['resources/css/app.css', 'resources/js/app.js'])
</head>

<body class="font-sans antialiased">
    <div class="min-h-screen bg-gray-100 dark:bg-gray-800">

        <!-- Navigation Menu -->
        <nav class="bg-white dark:bg-gray-900 border-b border-gray-100 dark:border-gray-800">
            <!-- Navigation Menu Full Container -->
            <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
                <!-- Logo + Menu Items + Hamburger -->
                <div class="relative flex flex-col sm:flex-row px-6 sm:px-0 grow justify-between">
                    <!-- Logo -->
                    <div class="shrink-0 -ms-4">
                        <a href="{{ route('home')}}">
                            <div class="h-16 w-40 bg-cover bg-[url('../img/politecnico_h.svg')] dark:bg-[url('../img/politecnico_h_white.svg')]"></div>
                        </a>
                    </div>

                    <!-- Menu Items -->
                    <div id="menu-container" class="grow flex flex-col sm:flex-row items-stretch
                    invisible h-0 sm:visible sm:h-auto">
                        <!-- Menu Item: Courses -->
                        <x-menus.menu-item
                            content="Courses"
                            href="{{ route('courses.showcase') }}"
                            selected="{{ Route::currentRouteName() == 'courses.showcase'}}"
                        />

                        <!-- Menu Item: Curricula -->
                        <x-menus.submenu-full-width
                            content="Curricula"
                            selectable="1"
                            selected="0"
                            uniqueName="submenu_curricula">
                            @foreach ($courses as $course)
                                <x-menus.submenu-item
                                :content="$course->fullName"
                                selectable="1"
                                selected="0"
                                href="{{ route('courses.curriculum', ['course' => $course]) }}"/>
                            @endforeach
                        </x-menus.submenu-full-width>

                        <!-- Menu Item: Disciplines -->
                        <x-menus.menu-item
                            content="Disciplines"
                            selectable="1"
                            href="{{ route('disciplines.index') }}"
                            selected="{{ Route::currentRouteName() == 'disciplines.index'}}"
                            />

                        @auth
                        <!-- Menu Item: Teachers -->
                        <x-menus.menu-item
                            content="Teachers"
                            selectable="1"
                            href="{{ route('teachers.index') }}"
                            selected="{{ Route::currentRouteName() == 'teachers.index'}}"
                            />

                        <!-- Menu Item: Others -->
                        <x-menus.submenu
                            selectable="0"
                            uniqueName="submenu_others"
                            content="More">
                                @can('viewAny', App\Models\Student::class)
                                <x-menus.submenu-item
                                    content="Students"
                                    selectable="0"
                                    href="{{ route('students.index') }}" />
                                @endcan
                                <x-menus.submenu-item
                                    content="Administratives"
                                    selectable="0"
                                    href="{{ route('administratives.index') }}" />
                                <hr>
                                <x-menus.submenu-item
                                    content="Departments"
                                    selectable="0"
                                    href="{{ route('departments.index') }}"/>
                                <x-menus.submenu-item
                                    content="Course Management"
                                    href="{{ route('courses.index') }}"/>
                        </x-menus.submenu>
                        @endauth

                        <div class="grow"></div>

                        <!-- Menu Item: Cart -->
                        @if (session('cart'))
                            <x-menus.cart
                                :href="route('cart.show')"
                                selectable="1"
                                selected="{{ Route::currentRouteName() == 'cart.show'}}"
                                :total="session('cart')->count()"/>
                        @endif

                        @auth
                        <x-menus.submenu
                            selectable="0"
                            uniqueName="submenu_user"
                            >
                            <x-slot:content>
                                <div class="pe-1">
                                    <img src="{{ Auth::user()->photoFullUrl}}" class="w-11 h-11 min-w-11 min-h-11 rounded-full">
                                </div>
                                {{-- ATENÇÃO - ALTERAR FORMULA DE CALCULO DAS LARGURAS MÁXIMAS QUANDO O MENU FOR ALTERADO --}}
                                <div class="ps-1 sm:max-w-[calc(100vw-39rem)] md:max-w-[calc(100vw-41rem)] lg:max-w-[calc(100vw-46rem)] xl:max-w-[34rem] truncate">
                                    {{ Auth::user()->name }}
                                </div>
                            </x-slot>
                            <x-menus.submenu-item
                                content="My Disciplines"
                                selectable="0"
                                href="#"/>
                            <x-menus.submenu-item
                                content="My Teachers"
                                selectable="0"
                                href="#"/>
                            <x-menus.submenu-item
                                content="My Students"
                                selectable="0"
                                href="#"/>
                            <hr>
                            <x-menus.submenu-item
                                content="Profile"
                                selectable="0"
                                href="{{ route('profile.edit') }}"/>
                            <hr>
                            <form id="form_to_logout_from_menu" method="POST" action="{{ route('logout') }}" class="hidden">
                                @csrf
                            </form>
                            <a class="px-3 py-4 border-b-2 border-transparent
                                        text-sm font-medium leading-5 inline-flex h-auto
                                        text-gray-500 dark:text-gray-400
                                        hover:text-gray-700 dark:hover:text-gray-300
                                        hover:bg-gray-100 dark:hover:bg-gray-800
                                        focus:outline-none
                                        focus:text-gray-700 dark:focus:text-gray-300
                                        focus:bg-gray-100 dark:focus:bg-gray-800"
                                    href="#"
                                    onclick="event.preventDefault();
                                    document.getElementById('form_to_logout_from_menu').submit();">
                                Log Out
                            </a>
                        </x-menus.submenu>
                        @else
                        <!-- Menu Item: Login -->
                        <x-menus.menu-item
                            content="Login"
                            selectable="1"
                            href="{{ route('login') }}"
                            selected="{{ Route::currentRouteName() == 'login'}}"
                            />

                        @endauth
                    </div>
                    <!-- Hamburger -->
                    <div class="absolute right-0 top-0 flex sm:hidden pt-3 pe-3 text-black dark:text-gray-50">
                        <button id="hamburger_btn">
                            <svg class="h-8 w-8" stroke="currentColor" fill="none" viewBox="0 0 24 24">
                                <path id="hamburger_btn_open" stroke-linecap="round" stroke-linejoin="round"
                                stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
                                <path class="invisible" id="hamburger_btn_close" stroke-linecap="round"
                                stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                        </button>
                    </div>
                </div>
            </div>
        </nav>

        <!-- Page Heading -->
        <header class="bg-white dark:bg-gray-900 shadow">
            <div class="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
                <h4 class="mb-1 text-base text-gray-500 dark:text-gray-400 leading-tight">
                    Department of Computer Engineering
                </h4>
                <h2 class="font-semibold text-xl text-gray-800 dark:text-gray-200 leading-tight">
                    @yield('header-title')
                </h2>
            </div>
        </header>

        <main>
            <div class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
                @if (session('alert-msg'))
                    <x-alert type="{{ session('alert-type') ?? 'info' }}">
                        {!! session('alert-msg') !!}
                    </x-alert>
                @endif
                @if (!$errors->isEmpty())
                        <x-alert type="warning" message="Operation failed because there are validation errors!"/>
                @endif
                @yield('main')
            </div>
        </main>
    </div>
</body>

</html>





100)  ----------------------------- -----------------------------

@extends('layouts.main')

@section('header-title', 'List of Students')

@section('main')
    <div class="flex justify-center">
        <div class="my-4 p-6 bg-white dark:bg-gray-900 overflow-hidden
                    shadow-sm sm:rounded-lg text-gray-900 dark:text-gray-50">
            <x-students.filter-card
                :filterAction="route('students.index')"
                :resetUrl="route('students.index')"
                :courses="$courseOptions"
                :course="old('course', $filterByCourse)"
                :name="old('name', $filterByName)"
                class="mb-6"
                />
            @can('create', App\Models\Student::class)
            <div class="flex items-center gap-4 mb-4">
                <x-button
                    href="{{ route('students.create') }}"
                    text="Create a new student"
                    type="success"/>
            </div>
            @endcan
            <div class="font-base text-sm text-gray-700 dark:text-gray-300">
                <x-students.table :students="$students"
                    :showCourse="true"
                    :showView="true"
                    :showEdit="true"
                    :showDelete="true"
                    />
            </div>
            <div class="mt-4">
                {{ $students->links() }}
            </div>
        </div>
    </div>
@endsection





101)  ----------------------------- -----------------------------

<div {{ $attributes }}>
    <table class="table-auto border-collapse">
        <thead>
        <tr class="border-b-2 border-b-gray-400 dark:border-b-gray-500 bg-gray-100 dark:bg-gray-800">
            <th class="px-2 py-2 text-right">Number</th>
            <th class="px-2 py-2 text-left">Name</th>
            @if($showCourse)
                <th class="px-2 py-2 text-left hidden md:table-cell">Course</th>
            @endif
            <th class="px-2 py-2 text-left hidden lg:table-cell">Email</th>
            @if($showView)
                <th></th>
            @endif
            @if($showEdit)
                <th></th>
            @endif
            @if($showDelete)
                <th></th>
            @endif
        </tr>
        </thead>
        <tbody>
        @foreach ($students as $student)
            <tr class="border-b border-b-gray-400 dark:border-b-gray-500">
                <td class="px-2 py-2 text-right">{{ $student->number }}</td>
                <td class="px-2 py-2 text-left">{{ $student->user->name }}</td>
                @if($showCourse)
                    <td class="px-2 py-2 text-left hidden md:table-cell">{{ $student?->courseRef?->name }}</td>
                @endif
                <td class="px-2 py-2 text-left hidden lg:table-cell">{{ $student->user->email }}</td>
                @if($showView)
                    @can('view', $student)
                        <td>
                            <x-table.icon-show class="ps-3 px-0.5"
                            href="{{ route('students.show', ['student' => $student]) }}"/>
                        </td>
                    @else
                        <td></td>
                    @endcan
                @endif
                @if($showEdit)
                    @can('update', $student)
                    <td>
                        <x-table.icon-edit class="px-0.5"
                        href="{{ route('students.edit', ['student' => $student]) }}"/>
                    </td>
                    @else
                        <td></td>
                    @endcan
                @endif
                @if($showDelete)
                    @can('delete', $student)
                    <td>
                        <x-table.icon-delete class="px-0.5"
                        action="{{ route('students.destroy', ['student' => $student]) }}"/>
                    </td>
                    @else
                        <td></td>
                    @endcan
                @endif
            </tr>
        @endforeach
        </tbody>
    </table>
</div>





104)  ----------------------------- -----------------------------

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Student;
use App\Models\User;
use Illuminate\View\View;
use Illuminate\Http\RedirectResponse;
use App\Http\Requests\StudentFormRequest;
use App\Models\Course;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\DB;
use Illuminate\Foundation\Auth\Access\AuthorizesRequests;

class StudentController extends \Illuminate\Routing\Controller
{
    use AuthorizesRequests;

    public function __construct()
    {
        $this->authorizeResource(Student::class);
    }

    public function index(Request $request): View
    {
        $courseOptions = Course::orderBy('type')->orderBy('name')->get()->pluck('fullName', 'abbreviation')->toArray();
        $courseOptions = array_merge([null => 'Any course'], $courseOptions);

        $filterByCourse = $request->query('course');
        $filterByName = $request->query('name');
        $studentsQuery = Student::query();
        if ($filterByCourse !== null) {
            $studentsQuery->where('course', $filterByCourse);
        }
        // Next 3 lines are required when sorting by name:
        // ->join is necessary so that we have access to the users.name - to be able to order by "users.name"
        // ->select avoids bringing to many fields (that may conflict with each other)
        $studentsQuery
            ->join('users', 'users.id', '=', 'students.user_id')
            ->select( 'students.*')
            ->orderBy('users.name');

        // Since we are joining students and users, we can simplify the code to search by name
        if ($filterByName !== null) {
            $studentsQuery
                ->where('users.type', 'S')
                ->where('users.name', 'like', "%$filterByName%");
        }
        // Next line were used to filter by name, when there were no join clauses
        // if ($filterByName !== null) {
        //     $usersIds = User::where('type', 'S')
        //         ->where('name', 'like', "%$filterByName%")
        //         ->pluck('id')
        //         ->toArray();
        //     $studentsIds = Student::whereIntegerInRaw('user_id', $usersIds)
        //         ->pluck('id')
        //         ->toArray();
        //     $studentsQuery->whereIntegerInRaw('students.id', $studentsIds);
        // }

        $students = $studentsQuery
            ->with('user', 'courseRef', 'disciplines')
            ->paginate(20)
            ->withQueryString();

        return view(
            'students.index',
            compact('students', 'courseOptions', 'filterByCourse', 'filterByName')
        );
    }

    public function show(Student $student): View
    {
        return view('students.show')->with('student', $student);
    }

    public function create(): View
    {
        $newStudent = new Student();
        // Next 2 lines ensure that the expression $newStudent->user->name is valid
        $newUser = new User();
        $newUser->type= 'S';
        $newStudent->user = $newUser;
        $newStudent->course = 'EI';
        return view('students.create')
            ->with('student', $newStudent);
    }

    public function store(StudentFormRequest $request): RedirectResponse
    {
        $validatedData = $request->validated();
        $newStudent = DB::transaction(function () use ($validatedData, $request) {
            $newUser = new User();
            $newUser->type = 'S';
            $newUser->name = $validatedData['name'];
            $newUser->email = $validatedData['email'];
            // Student is never an administrator
            $newUser->admin = 0;
            $newUser->gender = $validatedData['gender'];
            // Initial password is always 123
            $newUser->password = bcrypt('123');
            $newUser->save();
            $newStudent = new Student();
            $newStudent->user_id = $newUser->id;
            $newStudent->course = $validatedData['course'];
            $newStudent->number = $validatedData['number'];
            $newStudent->save();
            if ($request->hasFile('photo_file')) {
                $path = $request->photo_file->store('public/photos');
                $newUser->photo_url = basename($path);
                $newUser->save();
            }
            return $newStudent;
        });
        $url = route('students.show', ['student' => $newStudent]);
        $htmlMessage = "Student <a href='$url'><u>{$newStudent->user->name}</u></a> has been created successfully!";
        return redirect()->route('students.index')
            ->with('alert-type', 'success')
            ->with('alert-msg', $htmlMessage);
    }

    public function edit(Student $student): View
    {
        return view('students.edit')
            ->with('student', $student);
    }

    public function update(StudentFormRequest $request, Student $student): RedirectResponse
    {
        $validatedData = $request->validated();
        $student = DB::transaction(function () use ($validatedData, $student, $request) {
            $student->course = $validatedData['course'];
            $student->number = $validatedData['number'];
            $student->save();
            $student->user->type = 'S';
            $student->user->name = $validatedData['name'];
            $student->user->email = $validatedData['email'];
            // Student is never an administrator
            $student->user->admin = 0;
            $student->user->gender = $validatedData['gender'];
            $student->user->save();
            if ($request->hasFile('photo_file')) {
                // Delete previous file (if any)
                if (
                    $student->user->photo_url &&
                    Storage::fileExists('public/photos/' . $student->user->photo_url)
                ) {
                    Storage::delete('public/photos/' . $student->user->photo_url);
                }
                $path = $request->photo_file->store('public/photos');
                $student->user->photo_url = basename($path);
                $student->user->save();
            }
            return $student;
        });
        $url = route('students.show', ['student' => $student]);
        $htmlMessage = "Student <a href='$url'><u>{$student->user->name}</u></a> has been updated successfully!";
        return redirect()->route('students.index')
            ->with('alert-type', 'success')
            ->with('alert-msg', $htmlMessage);
    }

    public function destroy(Student $student): RedirectResponse
    {
        try {
            $url = route('students.show', ['student' => $student]);
            $totalStudentsDisciplines = DB::scalar(
                'select count(*) from students_disciplines where students_id = ?',
                [$student->id]
            );
            if ($totalStudentsDisciplines == 0) {
                DB::transaction(function () use ($student) {
                    $fileToDelete = $student->user->photo_url;
                    $student->delete();
                    $student->user->delete();
                    if ($fileToDelete) {
                        if (Storage::fileExists('public/photos/' . $fileToDelete)) {
                            Storage::delete('public/photos/' . $fileToDelete);
                        }
                    }
                });
                $alertType = 'success';
                $alertMsg = "Student {$student->user->name} has been deleted successfully!";
            } else {
                $alertType = 'warning';
                $gender = $student->user->gender == 'M' ? 'he' : 'she';
                $justification = match (true) {
                    $totalStudentsDisciplines <= 0 => "",
                    $totalStudentsDisciplines == 1 => "$gender is enrolled in 1 discipline",
                    $totalStudentsDisciplines > 1 => "$gender is enrolled in $totalStudentsDisciplines disciplines",
                };
                $alertMsg = "Student <a href='$url'><u>{$student->user->name}</u></a> cannot be deleted because $justification.";
            }
        } catch (\Exception $error) {
            $alertType = 'danger';
            $alertMsg = "It was not possible to delete the student
                            <a href='$url'><u>{$student->user->name}</u></a>
                            because there was an error with the operation!";
        }
        return redirect()->route('students.index')
            ->with('alert-type', $alertType)
            ->with('alert-msg', $alertMsg);
    }

    public function destroyPhoto(Student $student): RedirectResponse
    {
        if ($student->user->photo_url) {
            if (Storage::fileExists('public/photos/' . $student->user->photo_url)) {
                Storage::delete('public/photos/' . $student->user->photo_url);
            }
            $student->user->photo_url = null;
            $student->user->save();
            return redirect()->back()
                ->with('alert-type', 'success')
                ->with('alert-msg', "Photo of student {$student->user->name} has been deleted.");
        }
        return redirect()->back();
    }

}





106)  ----------------------------- -----------------------------

@extends('layouts.main')

@section('header-title', 'Student "' . $student->user->name . '"')

@section('main')
<div class="flex flex-col space-y-6">
    <div class="p-4 sm:p-8 bg-white dark:bg-gray-900 shadow sm:rounded-lg">
        <div class="max-full">
            <section>
                <div class="flex flex-wrap justify-end items-center gap-4 mb-4">
                    @can('create', App\Models\Student::class)
                    <x-button
                        href="{{ route('students.create') }}"
                        text="New"
                        type="success"/>
                    @endcan
                    @can('update', $student)
                    <x-button
                        href="{{ route('students.edit', ['student' => $student]) }}"
                        text="Edit"
                        type="primary"/>
                    @endcan
                    @can('delete', $student)
                    <form method="POST" action="{{ route('students.destroy', ['student' => $student]) }}">
                        @csrf
                        @method('DELETE')
                        <x-button
                            element="submit"
                            text="Delete"
                            type="danger"/>
                    </form>
                    @endcan
                </div>
                <header>
                    <h2 class="text-lg font-medium text-gray-900 dark:text-gray-100">
                        Student "{{ $student->user->name }}"
                    </h2>
                </header>
                @include('students.shared.fields', ['mode' => 'show'])

                <h3 class="pt-16 pb-4 text-2xl font-medium text-gray-900 dark:text-gray-100">
                    Disciplines
                </h3>
                <x-disciplines.table :disciplines="$student->disciplines"
                    :showView="true"
                    :showEdit="false"
                    :showDelete="false"
                    :showAddToCart="true"
                    class="pt-4"
                    />
            </section>
        </div>
    </div>
</div>
@endsection





107)  ----------------------------- -----------------------------

@extends('layouts.main')

@section('header-title', 'Student "' . $student->user->name . '"')

@section('main')
<div class="flex flex-col space-y-6">
    <div class="p-4 sm:p-8 bg-white dark:bg-gray-900 shadow sm:rounded-lg">
        <div class="max-full">
            <section>
                <div class="flex flex-wrap justify-end items-center gap-4 mb-4">
                    @can('create', App\Models\Student::class)
                    <x-button
                        href="{{ route('students.create') }}"
                        text="New"
                        type="success"/>
                    @endcan
                    @can('view', $student)
                    <x-button
                        href="{{ route('students.show', ['student' => $student]) }}"
                        text="View"
                        type="info"/>
                    @endcan
                    @can('delete', $student)
                    <form method="POST" action="{{ route('students.destroy', ['student' => $student]) }}">
                        @csrf
                        @method('DELETE')
                        <x-button
                            element="submit"
                            text="Delete"
                            type="danger"/>
                    </form>
                    @endcan
                </div>
                <header>
                    <h2 class="text-lg font-medium text-gray-900 dark:text-gray-100">
                        Edit student "{{ $student->user->name }}"
                    </h2>
                    <p class="mt-1 text-sm text-gray-600 dark:text-gray-300  mb-6">
                        Click on "Save" button to store the information.
                    </p>
                </header>

                <form method="POST" action="{{ route('students.update', ['student' => $student]) }}"
                    enctype="multipart/form-data">
                    @csrf
                    @method('PUT')
                    @include('students.shared.fields', ['mode' => 'edit'])
                    <div class="flex mt-6">
                        <x-button element="submit" type="dark" text="Save" class="uppercase"/>
                        <x-button element="a" type="light" text="Cancel" class="uppercase ms-4"
                                    href="{{ url()->full() }}"/>
                    </div>
                </form>
            </section>
        </div>
    </div>
</div>
<form class="hidden" id="form_to_delete_photo"
    method="POST" action="{{ route('students.photo.destroy', ['student' => $student]) }}">
    @csrf
    @method('DELETE')
</form>
@endsection
