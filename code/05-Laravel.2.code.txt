
3)  ----------------------------- -----------------------------

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=laravel
DB_USERNAME=root
DB_PASSWORD=




5)  ----------------------------- -----------------------------

composer update


6)  ----------------------------- -----------------------------

php artisan migrate:fresh

php artisan db:seed



11)  ----------------------------- -----------------------------

composer update



13)  ----------------------------- -----------------------------


./vendor/bin/sail up -d

sail up -d



14)  ----------------------------- -----------------------------

sail php artisan migrate:fresh

sail php artisan db:seed



22)  ----------------------------- -----------------------------


./vendor/bin/sail up -d

sail up -d





23)  ----------------------------- -----------------------------

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>ESTG</title>
    <style>
        table,
        th,
        td {
            border: 1px solid black;
            border-collapse: collapse;
        }

        html {
            height: 100%;
        }

        body {
            height: 100%;
            display: flex;
        }

        body>nav {
            min-width: 150px;
            background-color: lightgray;
            margin-right: 20px;
        }

        body>nav ul {
            list-style-type: none;
            padding-left: 15px;
            margin-bottom: 10px;
        }

        body>nav li {
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <nav>
        <ul>
            <li>
                <a href="{{ route('courses.index') }}">Courses</a>
            </li>
            <li>
                <a href="{{ route('disciplines.index') }}">Disciplines</a>
            </li>
        </ul>
    </nav>
    <div class="main">
        <header>
            <h1>@yield('header-title')</h1>
        </header>
        <div class="content">
            @yield('main')
        </div>
    </div>
</body>
</html>





24)  ----------------------------- -----------------------------


@extends('layout')

@section('header-title', 'List of courses')

@section('main')
    <p>
       <a href="{{ route('courses.create') }}">Create a new course</a>
    </p>
    <table>
        . . .
    </table>
@endsection





26)  ----------------------------- -----------------------------

@extends('layout')

@section('header-title', 'Update course "' . $course->name . '"')

@section('main')
    <form method="POST" action="{{ route('courses.update', ['course' => $course]) }}">
        @csrf
        @method('PUT')
        @include('courses.shared.fields')
        <div>
            <button type="submit" name="ok">Save course</button>
        </div>
    </form>
@endsection




32)  ----------------------------- -----------------------------

npm install -D tailwindcss postcss autoprefixer



33)  ----------------------------- -----------------------------

npm install



34)  ----------------------------- -----------------------------

npx tailwindcss init -p



35)  ----------------------------- -----------------------------

/** @type {import('tailwindcss').Config} */
export default {
    content: [
    "./resources/**/*.blade.php",
    "./resources/**/*.js",
    "./resources/**/*.vue",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}







36)  ----------------------------- -----------------------------

@tailwind base;
@tailwind components;
@tailwind utilities;





37)  ----------------------------- -----------------------------

npm run dev



38)  ----------------------------- -----------------------------

<!DOCTYPE html>
    . . .
    </style>
    @vite(['resources/css/app.css', 'resources/js/app.js'])
</head>
<body>




40)  ----------------------------- -----------------------------

. . .
<body>
    <nav class="bg-indigo-400">
            . . .




45)  ----------------------------- -----------------------------

npm run build



47)  ----------------------------- -----------------------------

npm run dev




49)  ----------------------------- -----------------------------

import defaultTheme from 'tailwindcss/defaultTheme';
import forms from '@tailwindcss/forms';

/** @type {import('tailwindcss').Config} */
export default {
    content: [
        "./resources/**/*.blade.php",
        "./resources/**/*.js",
        "./resources/**/*.vue",
  ],
  theme: {
    extend: {
        fontFamily: {
            sans: ['Figtree', ...defaultTheme.fontFamily.sans],
        },
    },
  },
  plugins: [forms],
}



50)  ----------------------------- -----------------------------

@extends('layout')

@section('header-title', 'Introduction')

@section('main')
<main>
    <div class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        . . .
    </div>
</main>
@endsection



51)  ----------------------------- -----------------------------

<?php

use App\Http\Controllers\CourseController;
use App\Http\Controllers\DisciplineController;
use Illuminate\Support\Facades\Route;

// REPLACE THIS
// Route::get('/', function () {
//     return view('welcome');
// })->name('home');

//WITH THIS
Route::view('/', 'home')->name('home');




52)  ----------------------------- -----------------------------

npm install @tailwindcss/forms



53)  ----------------------------- -----------------------------


<!DOCTYPE html>
. . .
<head>
    . . .
    <!-- Scripts AND CSS Fileds -->
    @vite(['resources/css/app.css', 'resources/js/app.js'])
</head>
<body class="font-sans antialiased">
    . . .
    <div class="h-16 w-40 bg-cover bg-[url('../img/politecnico_h.svg')]
                        dark:bg-[url('../img/politecnico_h_white.svg')]">
    . . .
         <!-- Menu Item: Courses -->
         <x-menus.menu-item
            content="Courses"
            href="{{ route('courses.index') }}"
            selected="{{ Route::currentRouteName() == 'courses.index'}}"
         />
    . . .
         <!-- Menu Item: Curricula -->
         <x-menus.submenu-full-width
            content="Curricula"
            selectable="1"
            selected="0"
            uniqueName="submenu_curricula">
                <x-menus.submenu-item
                   content="Computer Engineering"
                   selectable="1"
                   selected="1"
                   href="#"/>
    . . .
         </x-menus.submenu-full-width>
         <x-menus.submenu
            selectable="0"
            uniqueName="submenu_user"
         >
            <x-slot:content>
               <div class="pe-1">
               <img src="{{ Vite::asset('resources/img/photos/photo_example.jpeg') }}"
                    class="w-11 h-11 min-w-11 min-h-11 rounded-full">
{{-- ATENÇÃO:
     ALTERAR FORMULA DE CALCULO DAS LARGURAS MÁXIMAS QUANDO O MENU FOR ALTERADO --}}
               <div class="ps-1 sm:max-w-[calc(100vw-39rem)]
                                md:max-w-[calc(100vw-41rem)]
                                lg:max-w-[calc(100vw-46rem)]
                                xl:max-w-[34rem]
                           truncate">
       . . .
<!-- Page Heading -->
<header class="bg-white dark:bg-gray-900 shadow">
    . . .
    <h2 class="font-semibold text-xl text-gray-800 dark:text-gray-200 leading-tight">
        @yield('header-title')
    </h2>
    . . .
</header>

<main>
    <div class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        @yield('main')
    </div>
</main>
. . .




54)  ----------------------------- -----------------------------

import.meta.glob([
  '../img/**',
]);






55)  ----------------------------- -----------------------------

npm run build

npm run dev


57)  ----------------------------- -----------------------------


@extends('layouts.main')

@section('header-title', 'Introduction')

@section('main')
<main>
     . . .
</main>
@endsection




60)  ----------------------------- -----------------------------

import './bootstrap';

import './menu'

import.meta.glob([
  '../img/**',
]);





63)  ----------------------------- -----------------------------

<?php

namespace App\Providers;

use Illuminate\Support\ServiceProvider;
use Illuminate\Support\Facades\View;
use App\Models\Course;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     */
    public function register(): void
    {
        //
    }

    /**
     * Bootstrap any application services.
     */
    public function boot(): void
    {
        // View::share adds data (variables) that are shared through all views
        View::share('courses', Course::all());
    }
}





64)  ----------------------------- -----------------------------

. . .
<!-- Menu Item: Curricula -->
<x-menus.submenu-full-width
    content="Curricula"
    selectable="1"
    selected="0"
    uniqueName="submenu_curricula">
    @foreach ($courses as $course)
        <x-menus.submenu-item
        content="{{ $course->name }}"
        selectable="1"
        selected="0"
        href="#"/>
    @endforeach
</x-menus.submenu-full-width>
. . .



66)  ----------------------------- -----------------------------


<?php
. . .
class Course extends Model
{
    . . .
    protected $keyType = 'string';

    public function getFullNameAttribute()
    {
        return match ($this->type) {
            'Master'    => "Master's in ",
            'TESP'      => 'TeSP - ',
            default     => ''
        } . $this->name;
    }
}




67)  ----------------------------- -----------------------------

. . .
<!-- Menu Item: Curricula -->
<x-menus.submenu-full-width
    content="Curricula"
    selectable="1"
    selected="0"
    uniqueName="submenu_curricula">
    @foreach ($courses as $course)
        <x-menus.submenu-item
        :content="$course->fullName"
        selectable="1"
        selected="0"
        href="#"/>
    @endforeach
</x-menus.submenu-full-width>





72)  ----------------------------- -----------------------------

@extends('layouts.main')

@section('header-title', 'List of Courses')

@section('main')
    <div class="flex justify-center">
        <div class="my-4 p-6 bg-white dark:bg-gray-900 overflow-hidden
                    shadow-sm sm:rounded-lg text-gray-900 dark:text-gray-50">
            <p>
            . . .
            </table>
        </div>
    </div>
@endsection



74)  ----------------------------- -----------------------------

@extends('layouts.main')

@section('header-title', 'List of Courses')

@section('main')
    <div class="flex justify-center">
        <div class="my-4 p-6 bg-white dark:bg-gray-900 overflow-hidden
                    shadow-sm sm:rounded-lg text-gray-900 dark:text-gray-50">
            <div class="flex items-center gap-4 mb-4">
                <a href="{{ route('courses.create') }}"
                   class="px-4 py-2 inline-block border border-transparent rounded-md
                        font-medium text-sm tracking-widest
                        text-white dark:text-gray-900
                        bg-green-700 dark:bg-green-200
                        hover:bg-green-800 dark:hover:bg-green-100
                        focus:bg-green-800 dark:focus:bg-green-100
                        active:bg-green-900 dark:active:bg-green-100
                        focus:outline-none focus:ring-2
                        focus:ring-indigo-500 dark:focus:ring-indigo-400
                        focus:ring-offset-2 transition ease-in-out duration-150">
                    Create a new course
                </a>
            </div>
            <table>
            . . .



75)  ----------------------------- -----------------------------

php artisan make:component HyperlinkTextButton



77)  ----------------------------- -----------------------------

<?php

namespace App\View\Components;

use Closure;
use Illuminate\Contracts\View\View;
use Illuminate\View\Component;

class HyperlinkTextButton extends Component
{
    /**
     * Create a new component instance.
     */
    public function __construct(
        public string $text = '',
        public string $href = '#',
        public string $type = 'dark',
    ) {
        $this->type = strtolower($type);
        if (!in_array($this->type, ['primary', 'secondary', 'success', 'danger', 'warning', 'info', 'light', 'dark', 'link'], true)) {
            $this->type = 'dark';
        }
        $this->text = trim($text) ?: ucfirst($this->type);
    }

    /**
     * Get the view / contents that represent the component.
     */
    public function render(): View|Closure|string
    {
        return view('components.hyperlink-text-button');
    }
}



78)  ----------------------------- -----------------------------

{{--
    NOTE: we've used the match to define multiple versions of the button (by Type),
    to ensure that all specific color related classes are defined statically
    on the source code - this guarantees that the Tailwind builder
    detects the corresponding class.
    If we had used dynamically generated classes (e.g. "bg-{{ $color }}-800") then
    the builder would not detect concrete values.
    Check documentation about dynamic classes:
    https://tailwindcss.com/docs/content-configuration#dynamic-class-names
--}}
@php
    $colors = match($type) {
        'primary' => 'text-white dark:text-gray-900
                        bg-blue-600 dark:bg-blue-400
                        hover:bg-blue-700 dark:hover:bg-blue-300
                        focus:bg-blue-700 dark:focus:bg-blue-300
                        active:bg-blue-800 dark:active:bg-blue-200',
        'secondary' => 'text-white dark:text-gray-700
                        bg-gray-500 dark:bg-gray-400
                        hover:bg-gray-600 dark:hover:bg-gray-300
                        focus:bg-gray-600 dark:focus:bg-gray-300
                        active:bg-gray-700 dark:active:bg-gray-200',
        'success' => 'text-white dark:text-gray-900
                        bg-green-700 dark:bg-green-200
                        hover:bg-green-800 dark:hover:bg-green-100
                        focus:bg-green-800 dark:focus:bg-green-100
                        active:bg-green-900 dark:active:bg-green-100',
        'danger' => 'text-white dark:text-gray-900
                        bg-red-600 dark:bg-red-200
                        hover:bg-red-700 dark:hover:bg-red-100
                        focus:bg-red-700 dark:focus:bg-red-100
                        active:bg-red-800 dark:active:bg-red-100',
        'warning' => 'text-gray-900 dark:text-gray-200
                        bg-amber-400 dark:bg-amber-600
                        hover:bg-amber-300 dark:hover:bg-amber-700
                        focus:bg-amber-300 dark:focus:bg-amber-700
                        active:bg-amber-300 dark:active:bg-amber-700',
        'info' => 'text-gray-900 dark:text-gray-200
                        bg-cyan-400 dark:bg-cyan-600
                        hover:bg-cyan-300 dark:hover:bg-cyan-700
                        focus:bg-cyan-300 dark:focus:bg-cyan-700
                        active:bg-cyan-300 dark:active:bg-cyan-700',
        'light' => 'text-gray-900 dark:text-gray-200
                        bg-slate-50 dark:bg-slate-600
                        hover:bg-slate-200 dark:hover:bg-slate-700
                        focus:bg-slate-200 dark:focus:bg-slate-700
                        active:bg-slate-200 dark:active:bg-slate-700',
        'link' => 'text-blue-500
                        border-gray-200',
        default => ' text-white dark:text-gray-900
                        bg-gray-800 dark:bg-gray-200
                        hover:bg-gray-900 dark:hover:bg-gray-100
                        focus:bg-gray-900 dark:focus:bg-gray-100
                        active:bg-gray-950 dark:active:bg-gray-50',
    }
@endphp

<div>
    <a href="{{ $href }}"
       class="px-4 py-2 inline-block border border-transparent rounded-md
              font-medium text-sm tracking-widest
              focus:outline-none focus:ring-2
              focus:ring-indigo-500 dark:focus:ring-indigo-400
              focus:ring-offset-2 transition ease-in-out duration-150 {{ $colors }}">
        {{ $text }}
    </a>
</div>




79)  ----------------------------- -----------------------------

. . .
@section('main')
    <div class="flex justify-center">
        <div class="my-4 p-6 bg-white dark:bg-gray-900 overflow-hidden
                    shadow-sm sm:rounded-lg text-gray-900 dark:text-gray-50">
            <div class="flex items-center gap-4 mb-4">
                <x-hyperlink-text-button
                    href="{{ route('courses.create') }}"
                    text="Create a new course"
                    type="success"/>
            </div>
            . . .




80)  ----------------------------- -----------------------------

@extends('layouts.main')

@section('header-title', 'List of Courses')

@section('main')
    <div class="flex justify-center">
        <div class="my-4 p-6 bg-white dark:bg-gray-900 overflow-hidden
                    shadow-sm sm:rounded-lg text-gray-900 dark:text-gray-50">
            <div class="flex items-center gap-4 mb-4">
                <x-hyperlink-text-button
                    href="{{ route('courses.create') }}"
                    text="Create a new course"
                    type="success"/>
            </div>
            <div class="font-base text-sm text-gray-700 dark:text-gray-300">
                <table class="table-auto border-collapse">
                    <thead>
                    <tr class="border-b-2 border-b-gray-400 dark:border-b-gray-500 bg-gray-100 dark:bg-gray-800">
                        <th class="px-2 py-2 text-left hidden lg:table-cell">Abbreviation</th>
                        <th class="px-2 py-2 text-left">Name</th>
                        <th class="px-2 py-2 text-left">Type</th>
                        <th class="px-2 py-2 text-right hidden sm:table-cell">Nº Semesters</th>
                        <th class="px-2 py-2 text-right hidden sm:table-cell">Nº Places</th>
                        <th></th>
                        <th></th>
                        <th></th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach ($courses as $course)
                        <tr class="border-b border-b-gray-400 dark:border-b-gray-500">
                            <td class="px-2 py-2 text-left hidden lg:table-cell">{{ $course->abbreviation }}</td>
                            <td class="px-2 py-2 text-left">{{ $course->name }}</td>
                            <td class="px-2 py-2 text-left">{{ $course->type }}</td>
                            <td class="px-2 py-2 text-right hidden sm:table-cell">{{ $course->semesters }}</td>
                            <td class="px-2 py-2 text-right hidden sm:table-cell">{{ $course->places }}</td>
                            <td>
                                <a href="{{ route('courses.show', ['course' => $course]) }}">View</a>
                            </td>
                            <td>
                                <a href="{{ route('courses.edit', ['course' => $course]) }}">Update</a>
                            </td>
                            <td>
                                <form method="POST" action="{{ route('courses.destroy', ['course' => $course]) }}">
                                    @csrf
                                    @method('DELETE')
                                    <button type="submit" name="delete">Delete</button>
                                </form>
                            </td>

                        </tr>
                    @endforeach
                    </tbody>
                </table>
            </div>
        </div>
    </div>
@endsection



81)  ----------------------------- -----------------------------

php artisan make:component table/IconShow

php artisan make:component table/IconEdit

php artisan make:component table/IconDelete




82)  ----------------------------- -----------------------------

<?php

namespace App\View\Components\table;

use Closure;
use Illuminate\Contracts\View\View;
use Illuminate\View\Component;

class IconShow extends Component
{
    /**
     * Create a new component instance.
     */
    public function __construct(
        public string $href = '#',
    ) {
        //
    }

    /**
     * Get the view / contents that represent the component.
     */
    public function render(): View|Closure|string
    {
        return view('components.table.icon-show');
    }
}




83)  ----------------------------- -----------------------------

<?php

namespace App\View\Components\table;

use Closure;
use Illuminate\Contracts\View\View;
use Illuminate\View\Component;

class IconEdit extends Component
{
    /**
     * Create a new component instance.
     */
    public function __construct(
        public string $href = '#',
    ) {
        //
    }

    /**
     * Get the view / contents that represent the component.
     */
    public function render(): View|Closure|string
    {
        return view('components.table.icon-edit');
    }
}




84)  ----------------------------- -----------------------------

<?php

namespace App\View\Components\table;

use Closure;
use Illuminate\Contracts\View\View;
use Illuminate\View\Component;

class IconDelete extends Component
{
    /**
     * Create a new component instance.
     */
    public function __construct(
        public string $action = '#',
    ) {
        //
    }

    /**
     * Get the view / contents that represent the component.
     */
    public function render(): View|Closure|string
    {
        return view('components.table.icon-delete');
    }
}




85)  ----------------------------- -----------------------------

<div {{ $attributes->merge(['class' => 'hover:text-gray-900']) }}>
    <a href="{{ $href }}">
        <svg class="hover:stroke-2 w-6 h-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" d="M2.036 12.322a1.012 1.012 0 0 1 0-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.431 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178Z" />
            <path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z" />
        </svg>
    </a>
</div>



86)  ----------------------------- -----------------------------

<div {{ $attributes->merge(['class' => 'hover:text-blue-600']) }}>
    <a href="{{ $href }}">
        <svg class="hover:stroke-2 w-6 h-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1" stroke="currentColor" >
            <path stroke-linecap="round" stroke-linejoin="round" d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L10.582 16.07a4.5 4.5 0 0 1-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 0 1 1.13-1.897l8.932-8.931Zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0 1 15.75 21H5.25A2.25 2.25 0 0 1 3 18.75V8.25A2.25 2.25 0 0 1 5.25 6H10" />
        </svg>
    </a>
</div>



87)  ----------------------------- -----------------------------

<div {{ $attributes->merge(['class' => 'hover:text-red-600']) }}>
    <form method="POST" action="{{ $action }}"  class="w-6 h-6">
        @csrf
        @method('DELETE')
        <button type="submit" name="delete" class="w-6 h-6">
            <svg class="hover:stroke-2 w-6 h-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0" />
            </svg>
        </button>
    </form>
</div>




88)  ----------------------------- -----------------------------

@extends('layouts.main')

@section('header-title', 'List of Courses')

@section('main')
    <div class="flex justify-center">
        <div class="my-4 p-6 bg-white dark:bg-gray-900 overflow-hidden
                    shadow-sm sm:rounded-lg text-gray-900 dark:text-gray-50">
            <div class="flex items-center gap-4 mb-4">
                <x-hyperlink-text-button
                    href="{{ route('courses.create') }}"
                    text="Create a new course"
                    type="success"/>
            </div>
            <div class="font-base text-sm text-gray-700 dark:text-gray-300">
                <table class="table-auto border-collapse">
                    <thead>
                    <tr class="border-b-2 border-b-gray-400 dark:border-b-gray-500 bg-gray-100 dark:bg-gray-800">
                        <th class="px-2 py-2 text-left hidden lg:table-cell">Abbreviation</th>
                        <th class="px-2 py-2 text-left">Name</th>
                        <th class="px-2 py-2 text-left">Type</th>
                        <th class="px-2 py-2 text-right hidden sm:table-cell">Nº Semesters</th>
                        <th class="px-2 py-2 text-right hidden sm:table-cell">Nº Places</th>
                        <th></th>
                        <th></th>
                        <th></th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach ($courses as $course)
                        <tr class="border-b border-b-gray-400 dark:border-b-gray-500">
                            <td class="px-2 py-2 text-left hidden lg:table-cell">{{ $course->abbreviation }}</td>
                            <td class="px-2 py-2 text-left">{{ $course->name }}</td>
                            <td class="px-2 py-2 text-left">{{ $course->type }}</td>
                            <td class="px-2 py-2 text-right hidden sm:table-cell">{{ $course->semesters }}</td>
                            <td class="px-2 py-2 text-right hidden sm:table-cell">{{ $course->places }}</td>
                            <td>
                                <x-table.icon-show class="ps-3 px-0.5"
                                   href="{{ route('courses.show', ['course' => $course]) }}"/>
                            </td>
                            <td>
                                <x-table.icon-edit class="px-0.5"
                                   href="{{ route('courses.edit', ['course' => $course]) }}"/>
                            </td>
                            <td>
                                <x-table.icon-delete class="px-0.5"
                                   action="{{ route('courses.destroy', ['course' => $course]) }}"/>
                            </td>
                        </tr>
                    @endforeach
                    </tbody>
                </table>
            </div>
        </div>
    </div>
@endsection



91)  ----------------------------- -----------------------------

@extends('layouts.main')

@section('header-title', $course->name)

@section('main')
<div class="flex flex-col space-y-6">
    <div class="p-4 sm:p-8 bg-white dark:bg-gray-900 shadow sm:rounded-lg">
        <div class="max-full">
            <section>
                <header>
                    <h2 class="text-lg font-medium text-gray-900 dark:text-gray-100">
                        Edit course "{{ $course->name }}"
                    </h2>
                    <p class="mt-1 text-sm text-gray-600 dark:text-gray-300  mb-6">
                        Click on "Save" button to store the information.
                    </p>
                </header>

                <form method="POST" action="{{ route('courses.update', ['course' => $course]) }}">
                    @csrf
                    @method('PUT')
                    <div class="mt-6 space-y-4">
                        @include('courses.shared.fields')
                    </div>
                    <div>
                        <button type="submit" name="ok">Save course</button>
                    </div>
                </form>
            </section>
        </div>
    </div>
</div>
@endsection





95)  ----------------------------- -----------------------------

<?php

namespace App\View\Components;

use Closure;
use Illuminate\Contracts\View\View;
use Illuminate\View\Component;

class Button extends Component
{
    /**
     * Create a new component instance.
     */
    public function __construct(
        public string $element = 'a',
        public string $buttonName = '',
        public string $text = '',
        public string $href = '#',
        public string $type = 'dark',
    ) {
        $this->element = strtolower($element);
        if (!in_array($this->element, ['a', 'button', 'submit', 'reset'], true)) {
            $this->element = 'a';
        }
        $this->type = strtolower($type);
        if (!in_array($this->type, ['primary', 'secondary', 'success', 'danger', 'warning', 'info', 'light', 'dark', 'link'], true)) {
            $this->type = 'dark';
        }
        $this->buttonName = trim($buttonName);
        $this->text = trim($text) ?: ucfirst($this->type);
    }

    /**
     * Get the view / contents that represent the component.
     */
    public function render(): View|Closure|string
    {
        return view('components.button');
    }
}



97)  ----------------------------- -----------------------------

{{--
    NOTE: we've used the match to define multiple versions of the button (by Type),
    to ensure that all specific color related classes are defined statically
    on the source code - this guarantees that the Tailwind builder
    detects the corresponding class.
    If we had used dynamically generated classes (e.g. "bg-{{ $color }}-800") then
    the builder would not detect concrete values.
    Check documentation about dynamic classes:
    https://tailwindcss.com/docs/content-configuration#dynamic-class-names
--}}
@php
    $colors = match($type) {
        'primary' => 'text-white dark:text-gray-900
                        bg-blue-600 dark:bg-blue-400
                        hover:bg-blue-700 dark:hover:bg-blue-300
                        focus:bg-blue-700 dark:focus:bg-blue-300
                        active:bg-blue-800 dark:active:bg-blue-200',
        'secondary' => 'text-white dark:text-gray-700
                        bg-gray-500 dark:bg-gray-400
                        hover:bg-gray-600 dark:hover:bg-gray-300
                        focus:bg-gray-600 dark:focus:bg-gray-300
                        active:bg-gray-700 dark:active:bg-gray-200',
        'success' => 'text-white dark:text-gray-900
                        bg-green-700 dark:bg-green-200
                        hover:bg-green-800 dark:hover:bg-green-100
                        focus:bg-green-800 dark:focus:bg-green-100
                        active:bg-green-900 dark:active:bg-green-100',
        'danger' => 'text-white dark:text-gray-900
                        bg-red-600 dark:bg-red-200
                        hover:bg-red-700 dark:hover:bg-red-100
                        focus:bg-red-700 dark:focus:bg-red-100
                        active:bg-red-800 dark:active:bg-red-100',
        'warning' => 'text-gray-900 dark:text-gray-200
                        bg-amber-400 dark:bg-amber-600
                        hover:bg-amber-300 dark:hover:bg-amber-700
                        focus:bg-amber-300 dark:focus:bg-amber-700
                        active:bg-amber-300 dark:active:bg-amber-700',
        'info' => 'text-gray-900 dark:text-gray-200
                        bg-cyan-400 dark:bg-cyan-600
                        hover:bg-cyan-300 dark:hover:bg-cyan-700
                        focus:bg-cyan-300 dark:focus:bg-cyan-700
                        active:bg-cyan-300 dark:active:bg-cyan-700',
        'light' => 'text-gray-900 dark:text-gray-200
                        bg-slate-50 dark:bg-slate-600
                        hover:bg-slate-200 dark:hover:bg-slate-700
                        focus:bg-slate-200 dark:focus:bg-slate-700
                        active:bg-slate-200 dark:active:bg-slate-700',
        'link' => 'text-blue-500
                        border-gray-200',
        default => 'text-white dark:text-gray-900
                        bg-gray-800 dark:bg-gray-200
                        hover:bg-gray-900 dark:hover:bg-gray-100
                        focus:bg-gray-900 dark:focus:bg-gray-100
                        active:bg-gray-950 dark:active:bg-gray-50',
    }
@endphp
<div {{ $attributes }}>
    @if ($element == 'a')
        <a href="{{ $href }}"
            class="px-4 py-2 inline-block border border-transparent rounded-md
                    font-medium text-sm tracking-widest
                    focus:outline-none focus:ring-2
                    focus:ring-indigo-500 dark:focus:ring-indigo-400
                    focus:ring-offset-2 transition ease-in-out duration-150 {{ $colors }}">
            {{ $text }}
        </a>
    @else
        <button type="{{ $element }}" {{ $buttonName ? "name='$buttonName'" : '' }}
            class="px-4 py-2 inline-block border border-transparent rounded-md
                    font-medium text-sm tracking-widest
                    focus:outline-none focus:ring-2
                    focus:ring-indigo-500 dark:focus:ring-indigo-400
                    focus:ring-offset-2 transition ease-in-out duration-150 {{ $colors }}">
            {{ $text }}
        </button>
    @endif
</div>





98)  ----------------------------- -----------------------------

@extends('layouts.main')

@section('header-title', 'List of Courses')

@section('main')
    <div class="flex justify-center">
        <div class="my-4 p-6 bg-white dark:bg-gray-900 overflow-hidden
                    shadow-sm sm:rounded-lg text-gray-900 dark:text-gray-50">
            <div class="flex items-center gap-4 mb-4">
                <x-button
                    href="{{ route('courses.create') }}"
                    text="Create a new course"
                    type="success"/>
            </div>
            <div class="font-base text-sm text-gray-700 dark:text-gray-300">
                <table class="table-auto border-collapse">
                    <thead>
                    <tr class="border-b-2 border-b-gray-400 dark:border-b-gray-500 bg-gray-100 dark:bg-gray-800">
                        <th class="px-2 py-2 text-left hidden lg:table-cell">Abbreviation</th>
                        <th class="px-2 py-2 text-left">Name</th>
                        <th class="px-2 py-2 text-left">Type</th>
                        <th class="px-2 py-2 text-right hidden sm:table-cell">Nº Semesters</th>
                        <th class="px-2 py-2 text-right hidden sm:table-cell">Nº Places</th>
                        <th></th>
                        <th></th>
                        <th></th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach ($courses as $course)
                        <tr class="border-b border-b-gray-400 dark:border-b-gray-500">
                            <td class="px-2 py-2 text-left hidden lg:table-cell">{{ $course->abbreviation }}</td>
                            <td class="px-2 py-2 text-left">{{ $course->name }}</td>
                            <td class="px-2 py-2 text-left">{{ $course->type }}</td>
                            <td class="px-2 py-2 text-right hidden sm:table-cell">{{ $course->semesters }}</td>
                            <td class="px-2 py-2 text-right hidden sm:table-cell">{{ $course->places }}</td>
                            <td>
                                <x-table.icon-show class="ps-3 px-0.5"
                                   href="{{ route('courses.show', ['course' => $course]) }}"/>
                            </td>
                            <td>
                                <x-table.icon-edit class="px-0.5"
                                   href="{{ route('courses.edit', ['course' => $course]) }}"/>
                            </td>
                            <td>
                                <x-table.icon-delete class="px-0.5"
                                   action="{{ route('courses.destroy', ['course' => $course]) }}"/>
                            </td>
                        </tr>
                    @endforeach
                    </tbody>
                </table>
            </div>
        </div>
    </div>
@endsection




99)  ----------------------------- -----------------------------

@extends('layouts.main')

@section('header-title', $course->name)

@section('main')
<div class="flex flex-col space-y-6">
    <div class="p-4 sm:p-8 bg-white dark:bg-gray-900 shadow sm:rounded-lg">
        <div class="max-full">
            <section>
                <header>
                    <h2 class="text-lg font-medium text-gray-900 dark:text-gray-100">
                        Edit course "{{ $course->name }}"
                    </h2>
                    <p class="mt-1 text-sm text-gray-600 dark:text-gray-300  mb-6">
                        Click on "Save" button to store the information.
                    </p>
                </header>

                <form method="POST" action="{{ route('courses.update', ['course' => $course]) }}">
                    @csrf
                    @method('PUT')
                    <div class="mt-6 space-y-4">
                        @include('courses.shared.fields')
                    </div>
                    <div class="flex mt-6">
                        <x-button element="submit" type="dark" text="Save" class="uppercase"/>
                        <x-button element="reset" type="light" text="Cancel" class="uppercase ms-4"/>
                    </div>
                </form>
            </section>
        </div>
    </div>
</div>
@endsection


100)  ----------------------------- -----------------------------

php artisan make:component field/Input
php artisan make:component field/Select
php artisan make:component field/CheckBox
php artisan make:component field/RadioGroup
php artisan make:component field/TextArea



101)  ----------------------------- -----------------------------

----------------------------- -----------------------------
--- Class Input ---
----------------------------- -----------------------------

<?php

namespace App\View\Components\field;

use Closure;
use Illuminate\Contracts\View\View;
use Illuminate\View\Component;

class Input extends Component
{
    /**
     * Create a new component instance.
     */
    public function __construct(
        public string $name,
        public string $type = 'text',
        public string $value = '',
        public string $label = '',
        public bool $readonly = false,
        public bool $required = false,
        public string $width = 'full',
    ) {
        $this->type = trim(strtolower($type));
        if (!in_array($this->type, ['text', 'password', 'number', 'email', 'date', 'time', 'datetime-local', 'month', 'week', 'range', 'color'], true)) {
            $this->type = 'text';
        }
        $this->width = trim(strtolower($width));
        if (!in_array($this->width, ['full', 'xs', 'sm', 'md', 'lg', 'xl', '1/3', '2/3', '1/4', '2/4', '3/4', '1/5', '2/5', '3/5', '4/5'], true)) {
            $this->width = 'full';
        }
        $this->label = trim($label) ?: $name;
    }

    /**
     * Get the view / contents that represent the component.
     */
    public function render(): View|Closure|string
    {
        return view('components.field.input');
    }
}

----------------------------- -----------------------------
--- Class Select ---
----------------------------- -----------------------------
<?php

namespace App\View\Components\field;

use Closure;
use Illuminate\Contracts\View\View;
use Illuminate\View\Component;

class Select extends Component
{
    /**
     * Create a new component instance.
     */
    public function __construct(
        public string $name,
        public array $options,
        public string $value = '',
        public string $label = '',
        public string $defaultValue = '',
        public bool $readonly = false,
        public bool $required = false,
        public string $width = 'full',
    ) {
        if (!in_array($this->width, ['full', 'xs', 'sm', 'md', 'lg', 'xl', '1/3', '2/3', '1/4', '2/4', '3/4', '1/5', '2/5', '3/5', '4/5'], true)) {
            $this->width = 'full';
        }
        $this->label = trim($label) ?: $name;
    }

    /**
     * Get the view / contents that represent the component.
     */
    public function render(): View|Closure|string
    {
        return view('components.field.select');
    }
}


----------------------------- -----------------------------
--- Class RadioGroup ---
----------------------------- -----------------------------

<?php

namespace App\View\Components\field;

use Closure;
use Illuminate\Contracts\View\View;
use Illuminate\View\Component;

class RadioGroup extends Component
{
    /**
     * Create a new component instance.
     */
    public function __construct(
        public string $name,
        public array $options,
        public string $value = '',
        public string $label = '',
        public string $defaultValue = '',
        public bool $readonly = false,
        public bool $required = false,
        public string $width = 'full',
    ) {
        if (!in_array($this->width, ['full', 'xs', 'sm', 'md', 'lg', 'xl', '1/3', '2/3', '1/4', '2/4', '3/4', '1/5', '2/5', '3/5', '4/5'], true)) {
            $this->width = 'full';
        }
        $this->label = trim($label) ?: $name;
    }

    /**
     * Get the view / contents that represent the component.
     */
    public function render(): View|Closure|string
    {
        return view('components.field.radio-group');
    }
}

----------------------------- -----------------------------
--- Class CheckBox ---
----------------------------- -----------------------------

<?php

namespace App\View\Components\field;

use Closure;
use Illuminate\Contracts\View\View;
use Illuminate\View\Component;

class CheckBox extends Component
{
    /**
     * Create a new component instance.
     */
    public function __construct(
        public string $name,
        public ?bool $value = null,
        public string $label = '',
        public bool $readonly = false,
        public bool $required = false,
        public string $width = 'full',
    ) {
        $this->width = trim(strtolower($width));
        if (!in_array($this->width, ['full', 'xs', 'sm', 'md', 'lg', 'xl', '1/3', '2/3', '1/4', '2/4', '3/4', '1/5', '2/5', '3/5', '4/5'], true)) {
            $this->width = 'full';
        }
        $this->label = trim($label) ?: $name;
    }

    /**
     * Get the view / contents that represent the component.
     */
    public function render(): View|Closure|string
    {
        return view('components.field.check-box');
    }
}

----------------------------- -----------------------------
--- Class TextArea ---
----------------------------- -----------------------------

<?php

namespace App\View\Components\field;

use Closure;
use Illuminate\Contracts\View\View;
use Illuminate\View\Component;

class TextArea extends Component
{
    /**
     * Create a new component instance.
     */
    public function __construct(
        public string $name,
        public string $value = '',
        public string $label = '',
        public bool $readonly = false,
        public bool $required = false,
        public string $width = 'full',
        public string $height = 'md',
        public bool $resizable = false,
    ) {
        $this->width = trim(strtolower($width));
        if (!in_array($this->width, ['full', 'xs', 'sm', 'md', 'lg', 'xl', '1/3', '2/3', '1/4', '2/4', '3/4', '1/5', '2/5', '3/5', '4/5'], true)) {
            $this->width = 'full';
        }
        $this->height = trim(strtolower($height));
        if (!in_array($this->height, ['xs', 'sm', 'md', 'lg', 'xl'], true)) {
            $this->height = 'md';
        }
        $this->label = trim($label) ?: $name;
    }

    /**
     * Get the view / contents that represent the component.
     */
    public function render(): View|Closure|string
    {
        return view('components.field.text-area');
    }
}



102)  ----------------------------- -----------------------------


----------------------------- -----------------------------
--- View input.blade.php ---
----------------------------- -----------------------------

{{--
    NOTE: we've used the match to define multiple versions of width class,
    to ensure that all specific width related classes are defined statically
    on the source code - this guarantees that the Tailwind builder
    detects the corresponding class.
    If we had used dynamically generated classes (e.g. "w-{{ $width }}") then
    the builder would not detect concrete values.
    Check documentation about dynamic classes:
    https://tailwindcss.com/docs/content-configuration#dynamic-class-names
--}}
@php
    $widthClass = match($width) {
        'full' => 'w-full',
        'xs' => 'w-20',
        'sm' => 'w-32',
        'md' => 'w-64',
        'lg' => 'w-96',
        'xl' => 'w-[48rem]',
        '1/3' => 'w-1/3',
        '2/3' => 'w-2/3',
        '1/4' => 'w-1/4',
        '2/4' => 'w-2/4',
        '3/4' => 'w-3/4',
        '1/5' => 'w-1/5',
        '2/5' => 'w-2/5',
        '3/5' => 'w-3/5',
        '4/5' => 'w-4/5',
    }
@endphp
<div {{ $attributes->merge(['class' => "$widthClass"]) }}>
    <label class="block font-medium text-sm text-gray-700 dark:text-gray-300" for="id_{{ $name }}">
        {{ $label }}
    </label>
    <input id="id_{{ $name }}" name="{{ $name }}" type="{{ $type }}" value="{{ $value }}"
        class="appearance-none block
            mt-1 w-full
            bg-white dark:bg-gray-900
            text-black dark:text-gray-50
            border-gray-300 dark:border-gray-700
            focus:border-indigo-500 dark:focus:border-indigo-400
            focus:ring-indigo-500 dark:focus:ring-indigo-400
            rounded-md shadow-sm
            disabled:rounded-none disabled:shadow-none
            disabled:border-t-transparent disabled:border-x-transparent
            disabled:border-dashed
            disabled:opacity-100
            disabled:select-none"
            @required($required)
            @disabled($readonly)
            autofocus="autofocus"
        >
</div>

----------------------------- -----------------------------
--- View select.blade.php ---
----------------------------- -----------------------------

{{--
    NOTE: we've used the match to define multiple versions of width class,
    to ensure that all specific width related classes are defined statically
    on the source code - this guarantees that the Tailwind builder
    detects the corresponding class.
    If we had used dynamically generated classes (e.g. "w-{{ $width }}") then
    the builder would not detect concrete values.
    Check documentation about dynamic classes:
    https://tailwindcss.com/docs/content-configuration#dynamic-class-names
--}}
@php
    $widthClass = match($width) {
        'full' => 'w-full',
        'xs' => 'w-20',
        'sm' => 'w-32',
        'md' => 'w-64',
        'lg' => 'w-96',
        'xl' => 'w-[48rem]',
        '1/3' => 'w-1/3',
        '2/3' => 'w-2/3',
        '1/4' => 'w-1/4',
        '2/4' => 'w-2/4',
        '3/4' => 'w-3/4',
        '1/5' => 'w-1/5',
        '2/5' => 'w-2/5',
        '3/5' => 'w-3/5',
        '4/5' => 'w-4/5',
    };
    $selectedValue = array_key_exists($value, $options) ? $value : $defaultValue;
@endphp
<div {{ $attributes->merge(['class' => "$widthClass"]) }}>
    <label class="block font-medium text-sm text-gray-700 dark:text-gray-300" for="id_{{ $name }}">
        {{ $label }}
    </label>
    <select id="id_{{ $name }}" name="{{ $name }}"
        class="appearance-none block
            mt-1 w-full
            bg-white dark:bg-gray-900
            text-black dark:text-gray-50
            border-gray-300 dark:border-gray-700
            focus:border-indigo-500 dark:focus:border-indigo-400
            focus:ring-indigo-500 dark:focus:ring-indigo-400
            rounded-md shadow-sm
            disabled:rounded-none disabled:shadow-none
            disabled:border-t-transparent disabled:border-x-transparent
            disabled:border-dashed
            disabled:bg-none
            disabled:opacity-100
            disabled:select-none"
            @required($required)
            @disabled($readonly)
            autofocus="autofocus"
        >
        @foreach ($options as $key => $value)
            <option value="{{ $key }}" {{ $selectedValue == $key ? 'selected' : '' }}>{{ $value }}</option>
        @endforeach
    </select>
</div>



----------------------------- -----------------------------
--- View radio-group.blade.php ---
----------------------------- -----------------------------

{{--
    NOTE: we've used the match to define multiple versions of width class,
    to ensure that all specific width related classes are defined statically
    on the source code - this guarantees that the Tailwind builder
    detects the corresponding class.
    If we had used dynamically generated classes (e.g. "w-{{ $width }}") then
    the builder would not detect concrete values.
    Check documentation about dynamic classes:
    https://tailwindcss.com/docs/content-configuration#dynamic-class-names
--}}
@php
    $widthClass = match($width) {
        'full' => 'w-full',
        'xs' => 'w-20',
        'sm' => 'w-32',
        'md' => 'w-64',
        'lg' => 'w-96',
        'xl' => 'w-[48rem]',
        '1/3' => 'w-1/3',
        '2/3' => 'w-2/3',
        '1/4' => 'w-1/4',
        '2/4' => 'w-2/4',
        '3/4' => 'w-3/4',
        '1/5' => 'w-1/5',
        '2/5' => 'w-2/5',
        '3/5' => 'w-3/5',
        '4/5' => 'w-4/5',
    }
@endphp
<div {{ $attributes->merge(['class' => "$widthClass"]) }}>
    <input name="{{ $name }}" type="hidden" value="">
    <label class="block font-medium text-sm text-gray-700 dark:text-gray-300">
        {{ $label }}
    </label>
    <div class="flex flex-wrap ps-2">
        @foreach ($options as $key => $optionText)
            <div class="h-10 pe-12 inline-flex items-center">
                <input id="id_{{ $name }}_{{$key}}" name="{{ $name }}" type="radio" value="{{ $key }}"
                    {{ $value == $key ? 'checked' : '' }}
                    class="appearance-none
                        mt-0.5 w-6 h-6
                        bg-white dark:bg-gray-900
                        text-black dark:text-gray-50
                        border-gray-300 dark:border-gray-700
                        focus:border-indigo-500 dark:focus:border-indigo-400
                        focus:ring-indigo-500 dark:focus:ring-indigo-400
                        rounded-full shadow-sm
                        disabled:text-gray-500
                        disabled:shadow-none
                        disabled:opacity-100
                        disabled:select-none"
                        @required($required)
                        @disabled($readonly)
                        autofocus="autofocus"
                    >
                <label class="ml-2 font-normal text-base text-black dark:text-gray-50" for="id_{{ $name }}_{{$key}}">
                    {{ $optionText }}
                </label>
            </div>
        @endforeach
    </div>
</div>




----------------------------- -----------------------------
--- View check-box.blade.php ---
----------------------------- -----------------------------

{{--
    NOTE: we've used the match to define multiple versions of width class,
    to ensure that all specific width related classes are defined statically
    on the source code - this guarantees that the Tailwind builder
    detects the corresponding class.
    If we had used dynamically generated classes (e.g. "w-{{ $width }}") then
    the builder would not detect concrete values.
    Check documentation about dynamic classes:
    https://tailwindcss.com/docs/content-configuration#dynamic-class-names
--}}
@php
    $widthClass = match($width) {
        'full' => 'w-full',
        'xs' => 'w-20',
        'sm' => 'w-32',
        'md' => 'w-64',
        'lg' => 'w-96',
        'xl' => 'w-[48rem]',
        '1/3' => 'w-1/3',
        '2/3' => 'w-2/3',
        '1/4' => 'w-1/4',
        '2/4' => 'w-2/4',
        '3/4' => 'w-3/4',
        '1/5' => 'w-1/5',
        '2/5' => 'w-2/5',
        '3/5' => 'w-3/5',
        '4/5' => 'w-4/5',
    };
@endphp
<div {{ $attributes->merge(['class' => "$widthClass"]) }}>
    <div class="flex py-5">
        <input name="{{ $name }}" type="hidden" value="0">
        <input id="id_{{ $name }}" name="{{ $name }}" type="checkbox"
            {{ $value ? 'checked' : '' }}
            value="1"
            class="appearance-none mt-0.5 w-5 h-5
                bg-white dark:bg-gray-900
                text-black dark:text-gray-50
                border-gray-300 dark:border-gray-700
                focus:border-indigo-500 dark:focus:border-indigo-400
                focus:ring-indigo-500 dark:focus:ring-indigo-400
                shadow-sm
                disabled:text-gray-500
                disabled:opacity-100
                disabled:select-none"
                @required($required)
                @disabled($readonly)
                autofocus="autofocus"
            >
        <label class="ml-3 block font-normal text-base text-black dark:text-gray-50" for="id_{{ $name }}">
            {{ $label }}
        </label>
    </div>
</div>




----------------------------- -----------------------------
--- View text-area.blade.php ---
----------------------------- -----------------------------

{{--
    NOTE: we've used the match to define multiple versions of width class and height,
    to ensure that all specific width related classes are defined statically
    on the source code - this guarantees that the Tailwind builder
    detects the corresponding class.
    If we had used dynamically generated classes (e.g. "w-{{ $width }}") then
    the builder would not detect concrete values.
    Check documentation about dynamic classes:
    https://tailwindcss.com/docs/content-configuration#dynamic-class-names
--}}
@php
    $widthClass = match($width) {
        'full' => 'w-full',
        'xs' => 'w-20',
        'sm' => 'w-32',
        'md' => 'w-64',
        'lg' => 'w-96',
        'xl' => 'w-[48rem]',
        '1/3' => 'w-1/3',
        '2/3' => 'w-2/3',
        '1/4' => 'w-1/4',
        '2/4' => 'w-2/4',
        '3/4' => 'w-3/4',
        '1/5' => 'w-1/5',
        '2/5' => 'w-2/5',
        '3/5' => 'w-3/5',
        '4/5' => 'w-4/5',
    };
    $heightClass = match($height) {
        'xs' => 'h-[63px]',
        'sm' => 'h-[88px]',
        'md' => 'h-[134px]',
        'lg' => 'h-[206px]',
        'xl' => 'h-[420px]',
    };
@endphp
<div {{ $attributes->merge(['class' => "$widthClass"]) }}>
    <label class="block font-medium text-sm text-gray-700 dark:text-gray-300" for="id_{{ $name }}">
        {{ $label }}
    </label>
    <textarea id="id_{{ $name }}" name="{{ $name }}"
        class="appearance-none block
            mt-1 w-full {{ $heightClass }}
            bg-white dark:bg-gray-900
            text-black dark:text-gray-50
            border-gray-300 dark:border-gray-700
            focus:border-indigo-500 dark:focus:border-indigo-400
            focus:ring-indigo-500 dark:focus:ring-indigo-400
            rounded-md shadow-sm
            disabled:rounded-none disabled:shadow-none
            disabled:border-transparent
            disabled:opacity-100
            disabled:select-none
            {{ !$resizable || $readonly ? 'resize-none' : 'resize-y' }}"
            @required($required)
            @disabled($readonly)
            autofocus="autofocus"
        >
        {{ $value }}
    </textarea>
</div>




104)  ----------------------------- -----------------------------

@php
    $mode = $mode ?? 'edit';
    $readonly = $mode == 'show';
@endphp
<x-field.input name="abbreviation" label="Abbreviation" width="md"
                :readonly="$readonly || ($mode == 'edit')"
                value="{{ $course->abbreviation }}"/>
<x-field.select name="type" label="Type of course" width="md" :readonly="$readonly"
                value="{{ $course->type }}"
                :options="[
                     'Degree' => 'Degree',
                     'Master' => 'Master',
                     'TESP' => 'TESP'
                ]"/>
<x-field.input name="name" label="Name" :readonly="$readonly"
               value="{{ $course->name }}"/>
<x-field.input name="name_pt" label="Name (Portuguese)" :readonly="$readonly"
               value="{{ $course->name_pt }}"/>
<div class="flex space-x-4">
    <x-field.input name="semesters" label="Nº Semesters" width="sm"
                   :readonly="$readonly"
                   value="{{ $course->semesters }}"/>
    <x-field.input name="ECTS" label="Nº ECTS" width="sm" :readonly="$readonly"
                   value="{{ $course->ECTS }}"/>
    <x-field.input name="places" label="Nº Places" width="sm" :readonly="$readonly"
                   value="{{ $course->places }}"/>
</div>
<x-field.input name="contact" label="Contact" :readonly="$readonly"
                   value="{{ $course->contact }}"/>
<x-field.text-area name="objectives" label="Objectives" :readonly="$readonly"
                   value="{{ $course->objectives }}"/>
<x-field.text-area name="objectives_pt" label="Objectives (Portuguese)"
                   :readonly="$readonly"
                   value="{{ $course->objectives_pt }}"/>




106)  ----------------------------- -----------------------------

@extends('layouts.main')

@section('header-title', $course->name)

@section('main')
<div class="flex flex-col space-y-6">
    <div class="p-4 sm:p-8 bg-white dark:bg-gray-900 shadow sm:rounded-lg">
        <div class="max-full">
            <section>
                <header>
                    <h2 class="text-lg font-medium text-gray-900 dark:text-gray-100">
                        Edit course "{{ $course->name }}"
                    </h2>
                    <p class="mt-1 text-sm text-gray-600 dark:text-gray-300  mb-6">
                        Click on "Save" button to store the information.
                    </p>
                </header>

                <form method="POST" action="{{ route('courses.update', ['course' => $course]) }}">
                    @csrf
                    @method('PUT')
                    <div class="mt-6 space-y-4">
                        @include('courses.shared.fields', ['mode' => 'edit'])
                    </div>
                    <div class="flex mt-6">
                        <x-button element="submit" type="dark" text="Save" class="uppercase"/>
                        <x-button element="reset" type="light" text="Cancel" class="uppercase ms-4"/>
                    </div>
                </form>
            </section>
        </div>
    </div>
</div>
@endsection




107)  ----------------------------- -----------------------------

@extends('layouts.main')

@section('header-title', 'New Course')

@section('main')
<div class="flex flex-col space-y-6">
    <div class="p-4 sm:p-8 bg-white dark:bg-gray-900 shadow sm:rounded-lg">
        <div class="max-full">
            <section>
                <header>
                    <h2 class="text-lg font-medium text-gray-900 dark:text-gray-100">
                        New course
                    </h2>
                    <p class="mt-1 text-sm text-gray-600 dark:text-gray-300  mb-6">
                        Click on "Save" button to store the information.
                    </p>
                </header>

                <form method="POST" action="{{ route('courses.store') }}">
                    @csrf
                    <div class="mt-6 space-y-4">
                        @include('courses.shared.fields', ['mode' => 'create'])
                    </div>
                    <div class="flex mt-6">
                        <x-button element="submit" type="dark" text="Save new course" class="uppercase"/>
                    </div>
                </form>
            </section>
        </div>
    </div>
</div>
@endsection




109)  ----------------------------- -----------------------------

@extends('layouts.main')

@section('header-title', $course->name)

@section('main')
<div class="flex flex-col space-y-6">
    <div class="p-4 sm:p-8 bg-white dark:bg-gray-900 shadow sm:rounded-lg">
        <div class="max-full">
            <section>
                <header>
                    <h2 class="text-lg font-medium text-gray-900 dark:text-gray-100">
                        Course "{{ $course->name }}"
                    </h2>
                </header>
                <div class="mt-6 space-y-4">
                    @include('courses.shared.fields', ['mode' => 'show'])
                </div>
            </section>
        </div>
    </div>
</div>
@endsection




111)  ----------------------------- -----------------------------

@php
    $mode = $mode ?? 'edit';
    $readonly = $mode == 'show';
@endphp
<x-field.input name="abbreviation" label="Abbreviation" width="md"
                :readonly="$readonly || ($mode == 'edit')"
                value="{{ $course->abbreviation }}"/>
<x-field.radio-group name="type" label="Type of course" :readonly="$readonly"
                value="{{ $course->type }}"
                :options="[
                     'Degree' => 'Degree',
                     'Master' => 'Master',
                     'TESP' => 'TESP'
                ]"/>
<x-field.input name="name" label="Name" :readonly="$readonly"
               value="{{ $course->name }}"/>
<x-field.input name="name_pt" label="Name (Portuguese)" :readonly="$readonly"
               value="{{ $course->name_pt }}"/>
<div class="flex space-x-4">
    <x-field.input name="semesters" label="Nº Semesters" width="sm"
                   :readonly="$readonly"
                   value="{{ $course->semesters }}"/>
    <x-field.input name="ECTS" label="Nº ECTS" width="sm" :readonly="$readonly"
                   value="{{ $course->ECTS }}"/>
    <x-field.input name="places" label="Nº Places" width="sm" :readonly="$readonly"
                   value="{{ $course->places }}"/>
</div>
<x-field.input name="contact" label="Contact" :readonly="$readonly"
                   value="{{ $course->contact }}"/>
<x-field.text-area name="objectives" label="Objectives" :readonly="$readonly"
                   value="{{ $course->objectives }}"/>
<x-field.text-area name="objectives_pt" label="Objectives (Portuguese)"
                   :readonly="$readonly"
                   value="{{ $course->objectives_pt }}"/>





114)  ----------------------------- -----------------------------

    public function index(): View
    {
        $allCourses = Course::paginate(3);
        debug($allCourses);
        return view('courses.index')->with('courses', $allCourses);
    }



115)  ----------------------------- -----------------------------

import defaultTheme from 'tailwindcss/defaultTheme';
import forms from '@tailwindcss/forms';

/** @type {import('tailwindcss').Config} */
export default {
    content: [
    "./resources/**/*.blade.php",
    "./resources/**/*.js",
    "./resources/**/*.vue",
    "./vendor/laravel/framework/src/Illuminate/Pagination/resources/views/*.blade.php",
  ],
  theme: {
    extend: {
        fontFamily: {
            sans: ['Figtree', ...defaultTheme.fontFamily.sans],
        },
    },
  },
  plugins: [forms],
}





116)  ----------------------------- -----------------------------

@extends('layouts.main')

@section('header-title', 'List of Courses')

@section('main')
    <div class="flex justify-center">
        <div class="my-4 p-6 bg-white dark:bg-gray-900 overflow-hidden
                    shadow-sm sm:rounded-lg text-gray-900 dark:text-gray-50">
            <div class="flex items-center gap-4 mb-4">
                <x-button
                    href="{{ route('courses.create') }}"
                    text="Create a new course"
                    type="success"/>
            </div>
            <div class="font-base text-sm text-gray-700 dark:text-gray-300">
                <table class="table-auto border-collapse">
                    <thead>
                    <tr class="border-b-2 border-b-gray-400 dark:border-b-gray-500 bg-gray-100 dark:bg-gray-800">
                        <th class="px-2 py-2 text-left hidden lg:table-cell">Abbreviation</th>
                        <th class="px-2 py-2 text-left">Name</th>
                        <th class="px-2 py-2 text-left">Type</th>
                        <th class="px-2 py-2 text-right hidden sm:table-cell">Nº Semesters</th>
                        <th class="px-2 py-2 text-right hidden sm:table-cell">Nº Places</th>
                        <th></th>
                        <th></th>
                        <th></th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach ($courses as $course)
                        <tr class="border-b border-b-gray-400 dark:border-b-gray-500">
                            <td class="px-2 py-2 text-left hidden lg:table-cell">{{ $course->abbreviation }}</td>
                            <td class="px-2 py-2 text-left">{{ $course->name }}</td>
                            <td class="px-2 py-2 text-left">{{ $course->type }}</td>
                            <td class="px-2 py-2 text-right hidden sm:table-cell">{{ $course->semesters }}</td>
                            <td class="px-2 py-2 text-right hidden sm:table-cell">{{ $course->places }}</td>
                            <td>
                                <x-table.icon-show class="ps-3 px-0.5"
                                   href="{{ route('courses.show', ['course' => $course]) }}"/>
                            </td>
                            <td>
                                <x-table.icon-edit class="px-0.5"
                                   href="{{ route('courses.edit', ['course' => $course]) }}"/>
                            </td>
                            <td>
                                <x-table.icon-delete class="px-0.5"
                                   action="{{ route('courses.destroy', ['course' => $course]) }}"/>
                            </td>
                        </tr>
                    @endforeach
                    </tbody>
                </table>
            </div>
            <div class="mt-4">
                {{ $courses->links() }}
            </div>
        </div>
    </div>
@endsection





127)  ----------------------------- -----------------------------

...
    public function update(Request $request, Course $course): RedirectResponse
    {
        $validated = $request->validate([
            'name' => 'required|string|max:255',
            'name_pt' => 'required|string|max:255',
            'type' => 'required|in:Degree,Master,TESP',
            'semesters' => 'required|integer|between:1,10',
            'ECTS' => 'required|integer|min:1',
            'places' => 'required|integer|min:0',
            'contact' => 'required|email',
            'objectives' => 'required|string',
            'objectives_pt' => 'required|string',
        ]);
        // Use the $validated array instead of $request->all() array
        //$course->update($request->all());
        $course->update($validated);
        return redirect()->route('courses.index');
    }
...



129)  ----------------------------- -----------------------------

@php
    $mode = $mode ?? 'edit';
    $readonly = $mode == 'show';
@endphp
@dump($errors)
<x-field.input name="abbreviation" label="Abbreviation" width="md"
                :readonly="$readonly || ($mode == 'edit')"
                value="{{ $course->abbreviation }}"/>
 . . .




131)  ----------------------------- -----------------------------

@php
    $mode = $mode ?? 'edit';
    $readonly = $mode == 'show';
@endphp
<x-field.input name="abbreviation" label="Abbreviation" width="md"
                :readonly="$readonly || ($mode == 'edit')"
                value="{{ $course->abbreviation }}"/>
<x-field.radio-group name="type" label="Type of course" :readonly="$readonly"
                value="{{ $course->type }}"
                :options="[
                     'Degree' => 'Degree',
                     'Master' => 'Master',
                     'TESP' => 'TESP'
                ]"/>
<x-field.input name="name" label="Name" :readonly="$readonly"
               value="{{ $course->name }}"/>
<x-field.input name="name_pt" label="Name (Portuguese)" :readonly="$readonly"
               value="{{ $course->name_pt }}"/>
<div class="flex space-x-4">
    <x-field.input name="semesters" label="Nº Semesters" width="sm"
                   :readonly="$readonly"
                   value="{{ $course->semesters }}"/>
    @error('semesters')
        <div class="text-red-500">{{ $message }}</div>
    @enderror
    <x-field.input name="ECTS" label="Nº ECTS" width="sm" :readonly="$readonly"
                   value="{{ $course->ECTS }}"/>
    <x-field.input name="places" label="Nº Places" width="sm" :readonly="$readonly"
                   value="{{ $course->places }}"/>
</div>
<x-field.input name="contact" label="Contact" :readonly="$readonly"
                   value="{{ $course->contact }}"/>
<x-field.text-area name="objectives" label="Objectives" :readonly="$readonly"
                   value="{{ $course->objectives }}"/>
<x-field.text-area name="objectives_pt" label="Objectives (Portuguese)"
                   :readonly="$readonly"
                   value="{{ $course->objectives_pt }}"/>




135)  ----------------------------- -----------------------------

@php
    $mode = $mode ?? 'edit';
    $readonly = $mode == 'show';
@endphp
<x-field.input name="abbreviation" label="Abbreviation" width="md"
                :readonly="$readonly || ($mode == 'edit')"
                value="{{ old('abbreviation', $course->abbreviation) }}"/>
<x-field.radio-group name="type" label="Type of course" :readonly="$readonly"
                value="{{ old('type', $course->type) }}"
                :options="[
                     'Degree' => 'Degree',
                     'Master' => 'Master',
                     'TESP' => 'TESP'
                ]"/>
<x-field.input name="name" label="Name" :readonly="$readonly"
                value="{{ old('name', $course->name) }}"/>
<x-field.input name="name_pt" label="Name (Portuguese)" :readonly="$readonly"
               value="{{ old('name_pt', $course->name_pt) }}"/>
<div class="flex space-x-4">
    <x-field.input name="semesters" label="Nº Semesters" width="sm"
                    :readonly="$readonly"
                    value="{{ old('semesters', $course->semesters) }}"/>
    @error('semesters')
        <div class="text-red-500">{{ $message }}</div>
    @enderror
    <x-field.input name="ECTS" label="Nº ECTS" width="sm" :readonly="$readonly"
                    value="{{ old('ECTS', $course->ECTS) }}"/>
    <x-field.input name="places" label="Nº Places" width="sm" :readonly="$readonly"
                    value="{{ old('places', $course->places) }}"/>
</div>
<x-field.input name="contact" label="Contact" :readonly="$readonly"
                    value="{{ old('contact', $course->contact) }}"/>
<x-field.text-area name="objectives" label="Objectives" :readonly="$readonly"
                    value="{{ old('objectives', $course->objectives) }}"/>
<x-field.text-area name="objectives_pt" label="Objectives (Portuguese)"
                   :readonly="$readonly"
                   value="{{ old('objectives_pt', $course->objectives_pt) }}"/>




137)  ----------------------------- -----------------------------

@extends('layouts.main')

@section('header-title', $course->name)

@section('main')
<div class="flex flex-col space-y-6">
    <div class="p-4 sm:p-8 bg-white dark:bg-gray-900 shadow sm:rounded-lg">
        <div class="max-full">
            <section>
                <header>
                    <h2 class="text-lg font-medium text-gray-900 dark:text-gray-100">
                        Edit course "{{ $course->name }}"
                    </h2>
                    <p class="mt-1 text-sm text-gray-600 dark:text-gray-300  mb-6">
                        Click on "Save" button to store the information.
                    </p>
                </header>

                <form method="POST" action="{{ route('courses.update', ['course' => $course]) }}">
                    @csrf
                    @method('PUT')
                    <div class="mt-6 space-y-4">
                        @include('courses.shared.fields', ['mode' => 'edit'])
                    </div>
                    <div class="flex mt-6">
                        <x-button element="submit" type="dark" text="Save" class="uppercase"/>
                        <x-button element="a" type="light" text="Cancel" class="uppercase ms-4"
                                    href="{{ url()->full() }}"/>
                    </div>
                </form>
            </section>
        </div>
    </div>
</div>
@endsection




139)  ----------------------------- -----------------------------
140)  ----------------------------- -----------------------------

----------------------------- -----------------------------
--- View input.blade.php ---
----------------------------- -----------------------------

{{--
    NOTE: we've used the match to define multiple versions of width class,
    to ensure that all specific width related classes are defined statically
    on the source code - this guarantees that the Tailwind builder
    detects the corresponding class.
    If we had used dynamically generated classes (e.g. "w-{{ $width }}") then
    the builder would not detect concrete values.
    Check documentation about dynamic classes:
    https://tailwindcss.com/docs/content-configuration#dynamic-class-names
--}}
@php
    $widthClass = match($width) {
        'full' => 'w-full',
        'xs' => 'w-20',
        'sm' => 'w-32',
        'md' => 'w-64',
        'lg' => 'w-96',
        'xl' => 'w-[48rem]',
        '1/3' => 'w-1/3',
        '2/3' => 'w-2/3',
        '1/4' => 'w-1/4',
        '2/4' => 'w-2/4',
        '3/4' => 'w-3/4',
        '1/5' => 'w-1/5',
        '2/5' => 'w-2/5',
        '3/5' => 'w-3/5',
        '4/5' => 'w-4/5',
    }
@endphp
<div {{ $attributes->merge(['class' => "$widthClass"]) }}>
    <label class="block font-medium text-sm text-gray-700 dark:text-gray-300" for="id_{{ $name }}">
        {{ $label }}
    </label>
    <input id="id_{{ $name }}" name="{{ $name }}" type="{{ $type }}" value="{{ $value }}"
        class="appearance-none block
            mt-1 w-full
            bg-white dark:bg-gray-900
            text-black dark:text-gray-50
            @error($name)
                border-red-500 dark:border-red-500
            @else
                border-gray-300 dark:border-gray-700
            @enderror
            focus:border-indigo-500 dark:focus:border-indigo-400
            focus:ring-indigo-500 dark:focus:ring-indigo-400
            rounded-md shadow-sm
            disabled:rounded-none disabled:shadow-none
            disabled:border-t-transparent disabled:border-x-transparent
            disabled:border-dashed
            disabled:opacity-100
            disabled:select-none"
            @required($required)
            @disabled($readonly)
            autofocus="autofocus"
        >
    @error( $name )
        <div class="text-sm text-red-500">
            {{ $message }}
        </div>
    @enderror
</div>




----------------------------- -----------------------------
--- View select.blade.php ---
----------------------------- -----------------------------

{{--
    NOTE: we've used the match to define multiple versions of width class,
    to ensure that all specific width related classes are defined statically
    on the source code - this guarantees that the Tailwind builder
    detects the corresponding class.
    If we had used dynamically generated classes (e.g. "w-{{ $width }}") then
    the builder would not detect concrete values.
    Check documentation about dynamic classes:
    https://tailwindcss.com/docs/content-configuration#dynamic-class-names
--}}
@php
    $widthClass = match($width) {
        'full' => 'w-full',
        'xs' => 'w-20',
        'sm' => 'w-32',
        'md' => 'w-64',
        'lg' => 'w-96',
        'xl' => 'w-[48rem]',
        '1/3' => 'w-1/3',
        '2/3' => 'w-2/3',
        '1/4' => 'w-1/4',
        '2/4' => 'w-2/4',
        '3/4' => 'w-3/4',
        '1/5' => 'w-1/5',
        '2/5' => 'w-2/5',
        '3/5' => 'w-3/5',
        '4/5' => 'w-4/5',
    };
    $selectedValue = array_key_exists($value, $options) ? $value : $defaultValue;
@endphp
<div {{ $attributes->merge(['class' => "$widthClass"]) }}>
    <label class="block font-medium text-sm text-gray-700 dark:text-gray-300" for="id_{{ $name }}">
        {{ $label }}
    </label>
    <select id="id_{{ $name }}" name="{{ $name }}"
        class="appearance-none block
            mt-1 w-full
            bg-white dark:bg-gray-900
            text-black dark:text-gray-50
            @error($name)
                border-red-500 dark:border-red-500
            @else
                border-gray-300 dark:border-gray-700
            @enderror
            focus:border-indigo-500 dark:focus:border-indigo-400
            focus:ring-indigo-500 dark:focus:ring-indigo-400
            rounded-md shadow-sm
            disabled:rounded-none disabled:shadow-none
            disabled:border-t-transparent disabled:border-x-transparent
            disabled:border-dashed
            disabled:bg-none
            disabled:opacity-100
            disabled:select-none"
            @required($required)
            @disabled($readonly)
            autofocus="autofocus"
        >
        @foreach ($options as $key => $value)
            <option value="{{ $key }}" {{ $selectedValue == $key ? 'selected' : '' }}>{{ $value }}</option>
        @endforeach
    </select>
    @error( $name )
        <div class="text-sm text-red-500">
            {{ $message }}
        </div>
    @enderror
</div>



----------------------------- -----------------------------
--- View radio-group.blade.php ---
----------------------------- -----------------------------

{{--
    NOTE: we've used the match to define multiple versions of width class,
    to ensure that all specific width related classes are defined statically
    on the source code - this guarantees that the Tailwind builder
    detects the corresponding class.
    If we had used dynamically generated classes (e.g. "w-{{ $width }}") then
    the builder would not detect concrete values.
    Check documentation about dynamic classes:
    https://tailwindcss.com/docs/content-configuration#dynamic-class-names
--}}
@php
    $widthClass = match($width) {
        'full' => 'w-full',
        'xs' => 'w-20',
        'sm' => 'w-32',
        'md' => 'w-64',
        'lg' => 'w-96',
        'xl' => 'w-[48rem]',
        '1/3' => 'w-1/3',
        '2/3' => 'w-2/3',
        '1/4' => 'w-1/4',
        '2/4' => 'w-2/4',
        '3/4' => 'w-3/4',
        '1/5' => 'w-1/5',
        '2/5' => 'w-2/5',
        '3/5' => 'w-3/5',
        '4/5' => 'w-4/5',
    }
@endphp
<div {{ $attributes->merge(['class' => "$widthClass"]) }}>
    <input name="{{ $name }}" type="hidden" value="">
    <label class="block font-medium text-sm text-gray-700 dark:text-gray-300">
        {{ $label }}
    </label>
    <div class="flex flex-wrap ps-2">
        @foreach ($options as $key => $optionText)
            <div class="h-10 pe-12 inline-flex items-center">
                <input id="id_{{ $name }}_{{$key}}" name="{{ $name }}" type="radio" value="{{ $key }}"
                    {{ $value == $key ? 'checked' : '' }}
                    class="appearance-none
                        mt-0.5 w-6 h-6
                        bg-white dark:bg-gray-900
                        text-black dark:text-gray-50
                        @error($name)
                            border-red-500 dark:border-red-500
                        @else
                            border-gray-300 dark:border-gray-700
                        @enderror
                        focus:border-indigo-500 dark:focus:border-indigo-400
                        focus:ring-indigo-500 dark:focus:ring-indigo-400
                        rounded-full shadow-sm
                        disabled:text-gray-500
                        disabled:shadow-none
                        disabled:opacity-100
                        disabled:select-none"
                        @required($required)
                        @disabled($readonly)
                        autofocus="autofocus"
                    >
                <label class="ml-2 font-normal text-base text-black dark:text-gray-50" for="id_{{ $name }}_{{$key}}">
                    {{ $optionText }}
                </label>
            </div>
        @endforeach
    </div>
    @error( $name )
        <div class="text-sm text-red-500">
            {{ $message }}
        </div>
    @enderror
</div>


----------------------------- -----------------------------
--- View check-box.blade.php ---
----------------------------- -----------------------------

{{--
    NOTE: we've used the match to define multiple versions of width class,
    to ensure that all specific width related classes are defined statically
    on the source code - this guarantees that the Tailwind builder
    detects the corresponding class.
    If we had used dynamically generated classes (e.g. "w-{{ $width }}") then
    the builder would not detect concrete values.
    Check documentation about dynamic classes:
    https://tailwindcss.com/docs/content-configuration#dynamic-class-names
--}}
@php
    $widthClass = match($width) {
        'full' => 'w-full',
        'xs' => 'w-20',
        'sm' => 'w-32',
        'md' => 'w-64',
        'lg' => 'w-96',
        'xl' => 'w-[48rem]',
        '1/3' => 'w-1/3',
        '2/3' => 'w-2/3',
        '1/4' => 'w-1/4',
        '2/4' => 'w-2/4',
        '3/4' => 'w-3/4',
        '1/5' => 'w-1/5',
        '2/5' => 'w-2/5',
        '3/5' => 'w-3/5',
        '4/5' => 'w-4/5',
    };
    $selectedValue = array_key_exists($value, $options) ? $value : $defaultValue;
@endphp
<div {{ $attributes->merge(['class' => "$widthClass"]) }}>
    <label class="block font-medium text-sm text-gray-700 dark:text-gray-300" for="id_{{ $name }}">
        {{ $label }}
    </label>
    <select id="id_{{ $name }}" name="{{ $name }}"
        class="appearance-none block
            mt-1 w-full
            bg-white dark:bg-gray-900
            text-black dark:text-gray-50
            @error($name)
                border-red-500 dark:border-red-500
            @else
                border-gray-300 dark:border-gray-700
            @enderror
            focus:border-indigo-500 dark:focus:border-indigo-400
            focus:ring-indigo-500 dark:focus:ring-indigo-400
            rounded-md shadow-sm
            disabled:rounded-none disabled:shadow-none
            disabled:border-t-transparent disabled:border-x-transparent
            disabled:border-dashed
            disabled:bg-none
            disabled:opacity-100
            disabled:select-none"
            @required($required)
            @disabled($readonly)
            autofocus="autofocus"
        >
        @foreach ($options as $key => $value)
            <option value="{{ $key }}" {{ $selectedValue == $key ? 'selected' : '' }}>{{ $value }}</option>
        @endforeach
    </select>
    @error( $name )
        <div class="text-sm text-red-500">
            {{ $message }}
        </div>
    @enderror
</div>


----------------------------- -----------------------------
--- View text-area.blade.php ---
----------------------------- -----------------------------

{{--
    NOTE: we've used the match to define multiple versions of width class and height,
    to ensure that all specific width related classes are defined statically
    on the source code - this guarantees that the Tailwind builder
    detects the corresponding class.
    If we had used dynamically generated classes (e.g. "w-{{ $width }}") then
    the builder would not detect concrete values.
    Check documentation about dynamic classes:
    https://tailwindcss.com/docs/content-configuration#dynamic-class-names
--}}
@php
    $widthClass = match($width) {
        'full' => 'w-full',
        'xs' => 'w-20',
        'sm' => 'w-32',
        'md' => 'w-64',
        'lg' => 'w-96',
        'xl' => 'w-[48rem]',
        '1/3' => 'w-1/3',
        '2/3' => 'w-2/3',
        '1/4' => 'w-1/4',
        '2/4' => 'w-2/4',
        '3/4' => 'w-3/4',
        '1/5' => 'w-1/5',
        '2/5' => 'w-2/5',
        '3/5' => 'w-3/5',
        '4/5' => 'w-4/5',
    };
    $heightClass = match($height) {
        'xs' => 'h-[63px]',
        'sm' => 'h-[88px]',
        'md' => 'h-[134px]',
        'lg' => 'h-[206px]',
        'xl' => 'h-[420px]',
    };
@endphp
<div {{ $attributes->merge(['class' => "$widthClass"]) }}>
    <label class="block font-medium text-sm text-gray-700 dark:text-gray-300" for="id_{{ $name }}">
        {{ $label }}
    </label>
    <textarea id="id_{{ $name }}" name="{{ $name }}"
        class="appearance-none block
            mt-1 w-full {{ $heightClass }}
            bg-white dark:bg-gray-900
            text-black dark:text-gray-50
            @error($name)
                border-red-500 dark:border-red-500
            @else
                border-gray-300 dark:border-gray-700
            @enderror
            focus:border-indigo-500 dark:focus:border-indigo-400
            focus:ring-indigo-500 dark:focus:ring-indigo-400
            rounded-md shadow-sm
            disabled:rounded-none disabled:shadow-none
            disabled:border-transparent
            disabled:opacity-100
            disabled:select-none
            {{ !$resizable || $readonly ? 'resize-none' : 'resize-y' }}"
            @required($required)
            @disabled($readonly)
            "
            autofocus="autofocus"
        >
        {{ $value }}
    </textarea>
    @error( $name )
        <div class="text-sm text-red-500">
            {{ $message }}
        </div>
    @enderror
</div>





141)  ----------------------------- -----------------------------

@php
    $mode = $mode ?? 'edit';
    $readonly = $mode == 'show';
@endphp
<x-field.input name="abbreviation" label="Abbreviation" width="md"
                :readonly="$readonly || ($mode == 'edit')"
                value="{{ old('abbreviation', $course->abbreviation) }}"/>
<x-field.radio-group name="type" label="Type of course" :readonly="$readonly"
                value="{{ old('type', $course->type) }}"
                :options="[
                     'Degree' => 'Degree',
                     'Master' => 'Master',
                     'TESP' => 'TESP'
                ]"/>
<x-field.input name="name" label="Name" :readonly="$readonly"
                value="{{ old('name', $course->name) }}"/>
<x-field.input name="name_pt" label="Name (Portuguese)" :readonly="$readonly"
               value="{{ old('name_pt', $course->name_pt) }}"/>
<div class="flex space-x-4">
    <x-field.input name="semesters" label="Nº Semesters" width="sm"
                    :readonly="$readonly"
                    value="{{ old('semesters', $course->semesters) }}"/>
    <x-field.input name="ECTS" label="Nº ECTS" width="sm" :readonly="$readonly"
                    value="{{ old('ECTS', $course->ECTS) }}"/>
    <x-field.input name="places" label="Nº Places" width="sm" :readonly="$readonly"
                    value="{{ old('places', $course->places) }}"/>
</div>
<x-field.input name="contact" label="Contact" :readonly="$readonly"
                    value="{{ old('contact', $course->contact) }}"/>
<x-field.text-area name="objectives" label="Objectives" :readonly="$readonly"
                    value="{{ old('objectives', $course->objectives) }}"/>
<x-field.text-area name="objectives_pt" label="Objectives (Portuguese)"
                   :readonly="$readonly"
                   value="{{ old('objectives_pt', $course->objectives_pt) }}"/>






144)  ----------------------------- -----------------------------


php artisan make:request CourseFormRequest



146)  ----------------------------- -----------------------------

<?php

namespace App\Http\Requests;

use Illuminate\Foundation\Http\FormRequest;

class CourseFormRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
     */
    public function rules(): array
    {
        return [
            'name' => 'required|string|max:255',
            'name_pt' => 'required|string|max:255',
            'type' => 'required|in:Degree,Master,TESP',
            'semesters' => 'required|integer|between:1,10',
            'ECTS' => 'required|integer|min:1',
            'places' => 'required|integer|min:0',
            'contact' => 'required|email',
            'objectives' => 'required|string',
            'objectives_pt' => 'required|string',
        ];
    }

    public function messages(): array
    {
        return [
            'ECTS.required' => 'ECTS is required',
            'ECTS.integer' => 'ECTS must be an integer',
            'ECTS.min' => 'ECTS must be equal or greater that 1',
        ];
    }
}




147)  ----------------------------- -----------------------------

...
use App\Http\Requests\CourseFormRequest;
...

class CourseController extends Controller
{
    ...
    public function update(CourseFormRequest $request, Course $course): RedirectResponse
    {
        $course->update($request->validated());
        return redirect()->route('courses.index');
    }
...


149)  ----------------------------- -----------------------------


...
use App\Http\Requests\CourseFormRequest;
...

class CourseController extends Controller
{
    ...
    public function store(CourseFormRequest $request): RedirectResponse
    {
        Course::create($request->validated());
        return redirect()->route('courses.index');
    }
...




152)  ----------------------------- -----------------------------

<?php

namespace App\Http\Requests;

use Illuminate\Foundation\Http\FormRequest;

class CourseFormRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
     */
    public function rules(): array
    {
        $rules = [
            'name' => 'required|string|max:255',
            'name_pt' => 'required|string|max:255',
            'type' => 'required|in:Degree,Master,TESP',
            'semesters' => 'required|integer|between:1,10',
            'ECTS' => 'required|integer|min:1',
            'places' => 'required|integer|min:0',
            'contact' => 'required|email',
            'objectives' => 'required|string',
            'objectives_pt' => 'required|string',
        ];
        if (strtolower($this->getMethod()) == 'post') {
            // This will merge 2 arrays:
            // (adds the "abbreviation" rule to the $rules array)
            $rules = array_merge($rules, [
                'abbreviation' => 'required|string|max:20|unique:courses,abbreviation',
            ]);
        }
        return $rules;
    }

    public function messages(): array
    {
        return [
            'ECTS.required' => 'ECTS is required',
            'ECTS.integer' => 'ECTS must be an integer',
            'ECTS.min' => 'ECTS must be equal or greater that 1',
        ];
    }
}



156)  ----------------------------- -----------------------------

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Course;
use Illuminate\View\View;
use Illuminate\Http\RedirectResponse;
use App\Http\Requests\CourseFormRequest;

class CourseController extends Controller
{
    public function index(): View
    {
        $allCourses = Course::paginate(20);
        debug($allCourses);
        return view('courses.index')->with('courses', $allCourses);
    }

    public function create(): View
    {
        $newCourse = new Course();
        return view('courses.create')->with('course', $newCourse);
    }

    public function store(CourseFormRequest $request): RedirectResponse
    {
        $newCourse = Course::create($request->validated());
        $url = route('courses.show', ['course' => $newCourse]);
        $htmlMessage = "Course <a href='$url'><strong>{$newCourse->abbreviation}</strong> -
                        '{$newCourse->name}'</a> has been created successfully!";
        return redirect()->route('courses.index')
            ->with('alert-type', 'success')
            ->with('alert-msg', $htmlMessage);
    }

    public function edit(Course $course): View
    {
        return view('courses.edit')->with('course', $course);
    }

    public function update(CourseFormRequest $request, Course $course): RedirectResponse
    {
        $course->update($request->validated());
        $url = route('courses.show', ['course' => $course]);
        $htmlMessage = "Course <a href='$url'><strong>{$course->abbreviation}</strong> -
                        '{$course->name}'</a> has been updated successfully!";
        return redirect()->route('courses.index')
            ->with('alert-type', 'success')
            ->with('alert-msg', $htmlMessage);
    }

    public function destroy(Course $course): RedirectResponse
    {
        $course->delete();
        return redirect()->route('courses.index');
    }

    public function show(Course $course): View
    {
        return view('courses.show')->with('course', $course);
    }
}



158)  ----------------------------- -----------------------------

php artisan make:component Alert


159)  ----------------------------- -----------------------------

<?php

namespace App\View\Components;

use Closure;
use Illuminate\Contracts\View\View;
use Illuminate\View\Component;

class Alert extends Component
{
    public string $randomId = '';
    /**
     * Create a new component instance.
     */
    public function __construct(
        public string $type = 'dark',
        public string $message = '',
    )
    {
        $this->type = strtolower($type);
        if (!in_array($this->type, ['primary', 'secondary', 'success', 'danger', 'warning', 'info', 'light', 'dark'], true)) {
            $this->type = 'dark';
        }
        $this->randomId = 'alert-' . rand(10000, 99999);
    }

    /**
     * Get the view / contents that represent the component.
     */
    public function render(): View|Closure|string
    {
        return view('components.alert');
    }
}




160)  ----------------------------- -----------------------------

{{--
    NOTE: we've used the match to define multiple versions of the button (by Type),
    to ensure that all specific color related classes are defined statically
    on the source code - this guarantees that the Tailwind builder
    detects the corresponding class.
    If we had used dynamically generated classes (e.g. "bg-{{ $color }}-800") then
    the builder would not detect concrete values.
    Check documentation about dynamic classes:
    https://tailwindcss.com/docs/content-configuration#dynamic-class-names
--}}
@php
    $colors = match($type) {
        'primary' => 'text-blue-900 dark:text-blue-500
                        bg-blue-200 dark:bg-gray-800
                        border-blue-500 dark:border-blue-800',
        'secondary' => 'text-gray-900 dark:text-gray-400
                    bg-gray-200 dark:bg-gray-800
                    border-gray-500 dark:border-gray-600',
        'success' => 'text-green-800 dark:text-green-300
                        border-green-300 dark:border-green-700
                        bg-green-50 dark:bg-gray-800',
        'danger' => 'text-red-800 dark:text-red-400
                        border-red-300 dark:border-red-700
                        bg-red-50 dark:bg-gray-800',
        'warning' => 'text-yellow-800 dark:text-yellow-500
                        border-yellow-300 dark:border-yellow-600
                        bg-yellow-50 dark:bg-gray-800',
        'info' => 'text-blue-800 dark:text-blue-400
                        bg-blue-50 dark:bg-gray-800
                        border-blue-300 dark:border-blue-900',
        'light' => 'text-gray-500 dark:text-gray-600
                bg-gray-50 dark:bg-gray-800
                border-gray-300 dark:border-gray-700',
            default => 'text-white dark:text-gray-900
                        bg-gray-800 dark:bg-gray-200
                        border-gray-950 dark:border-gray-50',
    }
@endphp

<div id="{{ $randomId }}"
    {{ $attributes->merge(['class' =>
            'flex items-center p-4 ps-8 mb-2
                text-sm font-medium
                border rounded-lg ' . $colors]) }}>
    <div>
        @if ($slot->isEmpty())
            {{ $message }}
        @else
            {{ $slot }}
        @endif
    </div>
    <button type="button" class="ms-auto -mx-1.5 -my-1.5 p-1.5 rounded-lg
                                inline-flex items-center justify-center h-8 w-8"
            onclick="document.getElementById('{{ $randomId }}').style.display = 'none'">
        <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
        </svg>
  </button>
</div>





161)  ----------------------------- -----------------------------

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <title>Department of Computer Engineering</title>
    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.bunny.net">
    <link href="https://fonts.bunny.net/css?family=figtree:400,500,600&display=swap" rel="stylesheet" />

    <!-- Scripts AND CSS Fileds -->
    @vite(['resources/css/app.css', 'resources/js/app.js'])
</head>

<body class="font-sans antialiased">
    <div class="min-h-screen bg-gray-100 dark:bg-gray-800">

        <!-- Navigation Menu -->
        <nav class="bg-white dark:bg-gray-900 border-b border-gray-100 dark:border-gray-800">
            <!-- Navigation Menu Full Container -->
            <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
                <!-- Logo + Menu Items + Hamburger -->
                <div class="relative flex flex-col sm:flex-row px-6 sm:px-0 grow justify-between">
                    <!-- Logo -->
                    <div class="shrink-0 -ms-4">
                        <a href="{{ route('home')}}">
                            <div class="h-16 w-40 bg-cover bg-[url('../img/politecnico_h.svg')] dark:bg-[url('../img/politecnico_h_white.svg')]"></div>
                        </a>
                    </div>

                    <!-- Menu Items -->
                    <div id="menu-container" class="grow flex flex-col sm:flex-row items-stretch
                    invisible h-0 sm:visible sm:h-auto">
                        <!-- Menu Item: Courses -->
                        <x-menus.menu-item
                            content="Courses"
                            href="{{ route('courses.index') }}"
                            selected="{{ Route::currentRouteName() == 'courses.index'}}"
                        />

                        <!-- Menu Item: Curricula -->
                        <x-menus.submenu-full-width
                            content="Curricula"
                            selectable="1"
                            selected="0"
                            uniqueName="submenu_curricula">
                            @foreach ($courses as $course)
                                <x-menus.submenu-item
                                :content="$course->fullName"
                                selectable="1"
                                selected="0"
                                href="#"/>
                            @endforeach
                        </x-menus.submenu-full-width>

                        <!-- Menu Item: Disciplines -->
                        <x-menus.menu-item
                            content="Disciplines"
                            href="{{ route('disciplines.index') }}"
                            selected="{{ Route::currentRouteName() == 'disciplines.index'}}"
                            />

                        <!-- Menu Item: Teachers -->
                        <x-menus.menu-item
                            content="Teachers"
                            href="#"
                            selected="0"
                            />

                        <!-- Menu Item: Others -->
                        <x-menus.submenu
                            selectable="0"
                            uniqueName="submenu_others"
                            content="More">
                                <x-menus.submenu-item
                                    content="Students"
                                    selectable="0"
                                    href="#"/>
                                <x-menus.submenu-item
                                    content="Administratives"
                                    selectable="0"
                                    href="#"/>
                                <hr>
                                <x-menus.submenu-item
                                    content="Departments"
                                    selectable="0"
                                    href="#"/>
                                <x-menus.submenu-item
                                    content="Course Management"
                                    selectable="0"
                                    href="#"/>
                        </x-menus.submenu>

                        <div class="grow"></div>

                        <!-- Menu Item: Cart -->
                        <x-menus.cart
                            href="#"
                            selectable="0"
                            selected="1"
                            total="2"/>

                        <x-menus.submenu
                            selectable="0"
                            uniqueName="submenu_user"
                            >
                            <x-slot:content>
                                <div class="pe-1">
                                    <img src="{{ Vite::asset('resources/img/photos/photo_example.jpeg') }}" class="w-11 h-11 min-w-11 min-h-11 rounded-full">
                                </div>
                                {{-- ATENÇÃO - ALTERAR FORMULA DE CALCULO DAS LARGURAS MÁXIMAS QUANDO O MENU FOR ALTERADO --}}
                                <div class="ps-1 sm:max-w-[calc(100vw-39rem)] md:max-w-[calc(100vw-41rem)] lg:max-w-[calc(100vw-46rem)] xl:max-w-[34rem] truncate">
                                    João Miguel da Silva Pereira Antunes
                                </div>
                            </x-slot>
                            <x-menus.submenu-item
                                content="My Disciplines"
                                selectable="0"
                                href="#"/>
                            <x-menus.submenu-item
                                content="My Teachers"
                                selectable="0"
                                href="#"/>
                            <x-menus.submenu-item
                                content="My Students"
                                selectable="0"
                                href="#"/>
                            <hr>
                            <x-menus.submenu-item
                                content="Profile"
                                selectable="0"
                                href="#"/>
                            <x-menus.submenu-item
                                content="Change Password"
                                selectable="0"
                                href="#"/>
                            <hr>
                            <x-menus.submenu-item
                                content="Log Out"
                                selectable="0"
                                href="#"/>
                        </x-menus.submenu>
                    </div>
                    <!-- Hamburger -->
                    <div class="absolute right-0 top-0 flex sm:hidden pt-3 pe-3 text-black dark:text-gray-50">
                        <button id="hamburger_btn">
                            <svg class="h-8 w-8" stroke="currentColor" fill="none" viewBox="0 0 24 24">
                                <path id="hamburger_btn_open" stroke-linecap="round" stroke-linejoin="round"
                                stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
                                <path class="invisible" id="hamburger_btn_close" stroke-linecap="round"
                                stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                        </button>
                    </div>
                </div>
            </div>
        </nav>

        <!-- Page Heading -->
        <header class="bg-white dark:bg-gray-900 shadow">
            <div class="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
                <h4 class="mb-1 text-base text-gray-500 dark:text-gray-400 leading-tight">
                    Department of Computer Engineering
                </h4>
                <h2 class="font-semibold text-xl text-gray-800 dark:text-gray-200 leading-tight">
                    @yield('header-title')
                </h2>
            </div>
        </header>

        <main>
            <div class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
                @if (session('alert-msg'))
                    <x-alert type="{{ session('alert-type') ?? 'info' }}">
                        {!! session('alert-msg') !!}
                    </x-alert>
                @endif
                @if (!$errors->isEmpty())
                        <x-alert type="warning" message="Operation failed because there are validation errors!"/>
                @endif
                @yield('main')
            </div>
        </main>
    </div>
</body>

</html>




164)  ----------------------------- -----------------------------

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Course;
use Illuminate\View\View;
use Illuminate\Http\RedirectResponse;
use App\Http\Requests\CourseFormRequest;
use Illuminate\Support\Facades\DB;

class CourseController extends Controller
{
    public function index(): View
    {
        $allCourses = Course::paginate(20);
        debug($allCourses);
        return view('courses.index')->with('courses', $allCourses);
    }

    public function create(): View
    {
        $newCourse = new Course();
        return view('courses.create')->with('course', $newCourse);
    }

    public function store(CourseFormRequest $request): RedirectResponse
    {
        $newCourse = Course::create($request->validated());
        $url = route('courses.show', ['course' => $newCourse]);
        $htmlMessage = "Course <a href='$url'><u>{$newCourse->name}</u></a> ({$newCourse->abbreviation}) has been created successfully!";
        return redirect()->route('courses.index')
            ->with('alert-type', 'success')
            ->with('alert-msg', $htmlMessage);
    }

    public function edit(Course $course): View
    {
        return view('courses.edit')->with('course', $course);
    }

    public function update(CourseFormRequest $request, Course $course): RedirectResponse
    {
        $course->update($request->validated());
        $url = route('courses.show', ['course' => $course]);
        $htmlMessage = "Course <a href='$url'><u>{$course->name}</u></a> ({$course->abbreviation}) has been updated successfully!";
        return redirect()->route('courses.index')
            ->with('alert-type', 'success')
            ->with('alert-msg', $htmlMessage);
    }

    public function destroy(Course $course): RedirectResponse
    {
        try {
            $url = route('courses.show', ['course' => $course]);
            $totalStudents = DB::scalar(
                'select count(*) from students where course = ?',
                [$course->abbreviation]);
            $totalDisciplines = DB::scalar(
                'select count(*) from disciplines where course = ?',
                [$course->abbreviation]);
            if ($totalStudents == 0 && $totalDisciplines == 0) {
                $course->delete();
                $alertType = 'success';
                $alertMsg = "Course {$course->name} ({$course->abbreviation}) has been deleted successfully!";
            } else {
                $alertType = 'warning';
                $studentsStr = match(true) {
                    $totalStudents <= 0 => "",
                    $totalStudents == 1 => "there is 1 student enrolled in it",
                    $totalStudents > 1 => "there are $totalStudents students enrolled in it",
                };
                $disciplinesStr = match(true) {
                    $totalDisciplines <= 0 => "",
                    $totalDisciplines == 1 => "it already includes 1 discipline",
                    $totalDisciplines > 1 => "it already includes $totalDisciplines disciplines",
                };
                $justification = $studentsStr && $disciplinesStr
                    ? "$disciplinesStr and $studentsStr"
                    : "$disciplinesStr$studentsStr";
                $alertMsg = "Course <a href='$url'><u>{$course->name}</u></a> ({$course->abbreviation}) cannot be deleted because $justification.";
            }
        } catch (\Exception $error) {
            $alertType = 'danger';
            $alertMsg = "It was not possible to delete the course
                            <a href='$url'><u>{$course->name}</u></a> ({$course->abbreviation})
                            because there was an error with the operation!";
        }
        return redirect()->back()
            ->with('alert-type', $alertType)
            ->with('alert-msg', $alertMsg);
    }

    public function show(Course $course): View
    {
        return view('courses.show')->with('course', $course);
    }
}
